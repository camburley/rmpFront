{"ast":null,"code":"var _jsxFileName = \"/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js\";\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts';\nimport MarketBlurb from '../MarketBlurb/MarketBlurb';\nimport EventObj from '../EventObj/EventObj';\nimport axios from 'axios';\n\nclass LiveMarkets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.contracts = [];\n    this.values = [];\n    this.markets = [];\n    this.json = [];\n    this.length = \"\";\n\n    this.logState = () => {\n      console.log('hello');\n      console.log('this.state.allContracts loggedState()', this.state.allContracts);\n      let loopAllContracts = this.state.allContracts;\n      loopAllContracts.map((row, k) => {\n        if (k !== 0 && k !== 1) {\n          console.log('k within LOOP logState()', k);\n          console.log('row within LOOP logState()', row);\n          this.state.marketContracts.push(row);\n        }\n      });\n    };\n\n    this.getContractIds = () => {\n      console.log(\"getContractIds() was FIRED!\");\n      console.log('this.state.contractIds[this.props.marketIndex]', this.state.contractIds[this.props.marketIndex]);\n      const contractRow = this.state.allContracts[this.props.marketIndex];\n\n      if (contractRow !== undefined) {\n        const contractRows = contractRow.map((row, y) => {\n          //console.log('y IN CONTRACT IDS', y)\n          //console.log('row IN CONTRACT IDS', row.contract_id)\n          this.state.contractIds.push(row.contract_id);\n          return;\n        }); // now we should have the contractIds\n\n        return console.log('INSIDE getContractIds() / do we have contractIds? this.state.contractIds', this.state.contractIds); // return this.fetchContractPrices();\n      } else {\n        console.log('this.state.contractIds', this.state.contractIds);\n      }\n\n      return this.getContractPrices(this.state.contractIds);\n    };\n\n    this.getContractPrices = ids => {\n      let contractIds = this.state.contractIds;\n      let contractPrices = [];\n      let allPrices = [];\n      console.log('this.state.valuesLength', this.state.contractIds.length);\n\n      for (var i = 0; i < contractIds.length; i++) {\n        const rmpURL = 'https://realmoneypolls.herokuapp.com/api/value/value_list/' + this.state.contractIds[i];\n        contractPrices.push(axios.get(rmpURL)); //this.state.contractsAndValues.push(contractPrices)\n\n        console.log('contractPrices in values list loop', contractPrices);\n        console.log('this.state.contractsAndValues.length', this.state.contractsAndValues.length);\n      } // Inform Promises how to behave\n\n\n      Promise.all(contractPrices).then(response => console.log('response', response) + response.map((res, index) => {\n        allPrices.push(res.data[0][0]);\n        console.log('allPrices', allPrices); //this.state.contractsAndValues.push(res.data[0][0])\n\n        console.log('res.data', res.data[0][0]);\n        this.state.contractsAndValues.push(allPrices[index]);\n        console.log('this.state.contractsAndValues AFTER ALL PRICES ADDED', this.state.contractsAndValues);\n      }).then(this.makeSingleObj())).catch(err => console.log(err));\n    };\n\n    this.state = {\n      toggleSwitch: false,\n      marketIds: this.props.markets,\n      contractIds: [],\n      allContracts: [],\n      marketContracts: [],\n      contractsAndValues: [],\n      onlyValues: [],\n      jsonObj: [],\n      valuesLength: \"\",\n      objLength: [],\n      almostThere: [],\n      currentNames: [],\n      currentPrices: [],\n      loopThruTheseContracts: [],\n      realTimeData: []\n    }; // END OF STATE\n  } // END OF CONSTRUCTOR\n\n\n  //Notes: \n  // Need to Get all Market Ids thru props\n  // Need to get all Contracts where Market Ids exist\n  // Need to get all Values where Contract Ids exist \n  // One JSON object to map Contracts and Values\n  // Loop thru JSON, render values in <LiveContracts /> component\n  componentDidMount() {\n    let marketIds = ['3633', '3653'];\n    console.log('this.state.marketIds', this.state.marketIds);\n    let themContracts = [];\n\n    for (var i = 0; i < marketIds.length; i++) {\n      const rmpURL = 'https://realmoneypolls.herokuapp.com/api/contract/contract_list/' + marketIds[i];\n      themContracts.push(axios.get(rmpURL));\n      this.state.allContracts.push(themContracts);\n      console.log('themContracts', themContracts);\n    }\n\n    Promise.all(themContracts).then(response => console.log('INSIDE componentDidMount() ðŸ’¬ promise response', response) + response.map((res, index) => {\n      this.state.allContracts.push(res.data[0]);\n      console.log('INSIDE componentDidMount() ðŸ‘‹ this.state.allContracts', this.state.allContracts); //this.getContractIds();\n    })).catch(err => console.log(err));\n  } //  Coming out of componentDidMount(), got this.state.allContracts\n\n\n  checkMarketContracts() {\n    console.log('this.state.marketContracts checkMarketContracts()', this.state.marketContracts);\n  } // Coming out of logState() I can get contractIds for each Contract\n\n\n  async makeSingleObj() {\n    console.log('this.state.allContracts[this.props.marketIndex]', this.state.allContracts[this.props.marketIndex]);\n    console.log('this.state.contractsAndValues', this.state.contractsAndValues);\n    const allContracts = await this.state.allContracts[this.props.marketIndex];\n    const allValues = await this.state.contractsAndValues;\n    const comboArray = [];\n    const realTimeData = [];\n    const runCombineLoop = await allContracts.map((contract, x) => {\n      console.log(\"this is in combineLoop. What's in contract ðŸ¤” \", contract); //comboArray.push(contract)\n      //console.log('comboArray', comboArray)\n      //realTimeData.push(fullObj[y]);\n      // 33 rows in Array \n\n      allValues.map((value, y) => {\n        //console.log('ðŸ¥µ value', value)\n        if (y === x) {\n          const fullObj = {\n            \"contract_id\": contract.contract_id,\n            \"name\": contract.name,\n            \"image\": contract.image,\n            \"price\": value.best_buy_yes_offer,\n            \"priceChange\": (value.last_trade_price - value.last_close_price).toFixed(2)\n          };\n          console.log('ðŸ¤— contract + value (finalObj)', fullObj);\n          realTimeData.push(fullObj);\n          console.log('realTimeData final OBJ', realTimeData);\n        }\n\n        return this.state.realTimeData.push(realTimeData);\n      });\n    });\n    this.renderLiveContracts();\n  }\n\n  async renderLiveContracts() {\n    console.log('call made it out with data in state!', this.state.realTimeData[0]);\n    const realTimeData = this.state.realTimeData[0];\n    console.log('realTimeData in the renderLiveContracts() ', realTimeData);\n    realTimeData.map((row, k) => {\n      return React.createElement(LiveContracts, {\n        contractName: row.name,\n        contractAvatar: row.image,\n        contractPrice: row.price,\n        contractChange: row.priceChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"parent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.getContractIds,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \" Get ContractIds \"), React.createElement(\"button\", {\n      onClick: this.getContractPrices,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Grab Contract Prices\")), React.createElement(SlideToggle, {\n      duration: 300,\n      collapsed: true,\n      render: ({\n        toggle,\n        setCollapsibleElement\n      }) => React.createElement(\"div\", {\n        className: toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive',\n        onClick: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"LiveMarkets\",\n        onClick: this.renderLiveContracts,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, this.props.contractName), React.createElement(SlideToggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"slide-toggle__box\",\n        ref: setCollapsibleElement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, this.renderLiveContracts, React.createElement(MarketBlurb, {\n        blurb: \"PredictIt\\u2019s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\",\n        blurbLink: \" here.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LiveMarkets;\n/*\n\nconsole.log('this.state.valuesLength', this.state.valuesLength)\n\n\n        for ( var i = 0; i < this.state.contractIds.length; i++){\n            const rmpURL = 'https://realmoneypolls.herokuapp.com/api/value/value_list/' + this.state.contractIds[i];\n            contractPrices.push(axios.get(rmpURL));\n            //this.state.contractsAndValues.push(contractPrices)\n            console.log('contractPrices in values list loop', contractPrices)\n            console.log('this.state.contractsAndValues in values loop call', this.state.contractsAndValues[0])\n            console.log('this.state.contractsAndValues.length', this.state.contractsAndValues.length)\n            \n        }\n    \n        Promise.all(contractPrices).then((response) => \n        console.log('response', response) +\n        \n            response.map((res, index)=> {\n                \n                this.state.contractsAndValues.push(res.data[0][0])\n                console.log('res.data', res.data[0][0])\n                console.log('this.state.contractsAndValues should be 33 and 15', this.state.contractsAndValues)\n            \n            } \n                \n            \n            )).catch((err) => console.log(err));\n\n            console.log(this.state.contractsAndValues)\n\n*/","map":{"version":3,"sources":["/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js"],"names":["React","SlideToggle","LiveContracts","MarketBlurb","EventObj","axios","LiveMarkets","Component","constructor","props","contracts","values","markets","json","length","logState","console","log","state","allContracts","loopAllContracts","map","row","k","marketContracts","push","getContractIds","contractIds","marketIndex","contractRow","undefined","contractRows","y","contract_id","getContractPrices","ids","contractPrices","allPrices","i","rmpURL","get","contractsAndValues","Promise","all","then","response","res","index","data","makeSingleObj","catch","err","toggleSwitch","marketIds","onlyValues","jsonObj","valuesLength","objLength","almostThere","currentNames","currentPrices","loopThruTheseContracts","realTimeData","componentDidMount","themContracts","checkMarketContracts","allValues","comboArray","runCombineLoop","contract","x","value","fullObj","name","image","best_buy_yes_offer","last_trade_price","last_close_price","toFixed","renderLiveContracts","price","priceChange","render","toggle","setCollapsibleElement","contractName"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts'\nimport MarketBlurb from '../MarketBlurb/MarketBlurb'\nimport EventObj from '../EventObj/EventObj'\nimport axios from 'axios';\n\n\ntype Props = {\n    getContractIds: Function,\n  };\n\nclass LiveMarkets extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n        toggleSwitch : false,\n        marketIds : this.props.markets,\n        contractIds: [],\n        allContracts: [],\n        marketContracts: [],\n        contractsAndValues: [],\n        onlyValues: [],\n        jsonObj: [],\n        valuesLength: \"\",\n        objLength: [], \n        almostThere: [],\n        currentNames: [],\n        currentPrices:[],\n        loopThruTheseContracts: [],\n        realTimeData: []\n\n\n\n    }; // END OF STATE\n\n\n\n\n\n  } // END OF CONSTRUCTOR\n\n  contracts = []\n  values = []\n  markets = []\n  json = []\n  length = \"\"\n\n\n    //Notes: \n    // Need to Get all Market Ids thru props\n    // Need to get all Contracts where Market Ids exist\n    // Need to get all Values where Contract Ids exist \n    // One JSON object to map Contracts and Values\n    // Loop thru JSON, render values in <LiveContracts /> component\n\n     \n\n\n\n  componentDidMount() {\n  \n    let marketIds = ['3633', '3653']\n    console.log('this.state.marketIds', this.state.marketIds)\n\n    let themContracts = [];\n\n    for ( var i = 0; i < marketIds.length; i++){\n        const rmpURL = 'https://realmoneypolls.herokuapp.com/api/contract/contract_list/' + marketIds[i];\n        themContracts.push(axios.get(rmpURL));\n        this.state.allContracts.push(themContracts)\n        console.log('themContracts', themContracts)\n    }\n\n    Promise.all(themContracts).then((response) => \n    console.log('INSIDE componentDidMount() ðŸ’¬ promise response', response) +\n    \n        response.map((res, index) => {\n            this.state.allContracts.push(res.data[0])\n            console.log('INSIDE componentDidMount() ðŸ‘‹ this.state.allContracts', this.state.allContracts)\n            //this.getContractIds();\n        }\n        )).catch((err) => console.log(err));\n        \n }\n\n\n\n //  Coming out of componentDidMount(), got this.state.allContracts\n\n \n \nlogState = () => {\n    console.log('hello')\n    console.log('this.state.allContracts loggedState()', this.state.allContracts)\n\n    let loopAllContracts = this.state.allContracts\n\n    loopAllContracts.map((row, k) => {\n        if (k !== 0 && k !== 1){\n            console.log('k within LOOP logState()', k)\n            console.log('row within LOOP logState()', row)\n            this.state.marketContracts.push(row)\n\n        }\n    })\n}\n\n\ncheckMarketContracts(){\n    console.log('this.state.marketContracts checkMarketContracts()', this.state.marketContracts)\n}\n\n\n// Coming out of logState() I can get contractIds for each Contract\n\ngetContractIds = () => {\n    console.log(\"getContractIds() was FIRED!\")\n    console.log('this.state.contractIds[this.props.marketIndex]', this.state.contractIds[this.props.marketIndex])\n  const contractRow = this.state.allContracts[this.props.marketIndex]\n  if (contractRow !== undefined) {\n      \n  const contractRows = contractRow.map((row, y) => {\n      //console.log('y IN CONTRACT IDS', y)\n      //console.log('row IN CONTRACT IDS', row.contract_id)\n      this.state.contractIds.push(row.contract_id)\n      \n      return;\n\n  })\n  \n\n  // now we should have the contractIds\n\n  return console.log('INSIDE getContractIds() / do we have contractIds? this.state.contractIds', this.state.contractIds);\n  \n\n  \n  // return this.fetchContractPrices();\n} else {\n\n  console.log('this.state.contractIds', this.state.contractIds)\n}\n    \n    return this.getContractPrices(this.state.contractIds)\n\n}\n\n\n\n\ngetContractPrices = (ids) => {\n    let contractIds = this.state.contractIds\n    let contractPrices = [];\n    let allPrices = [];\n        console.log('this.state.valuesLength', this.state.contractIds.length);\n        for ( var i = 0; i < contractIds.length; i++){\n            const rmpURL = 'https://realmoneypolls.herokuapp.com/api/value/value_list/' + this.state.contractIds[i];\n            contractPrices.push(axios.get(rmpURL));\n            //this.state.contractsAndValues.push(contractPrices)\n            console.log('contractPrices in values list loop', contractPrices)\n            console.log('this.state.contractsAndValues.length', this.state.contractsAndValues.length)\n            \n        }\n    \n        // Inform Promises how to behave\n\n        Promise.all(contractPrices).then((response) => \n        console.log('response', response) +\n        \n            response.map((res, index) => \n            \n            {\n                allPrices.push(res.data[0][0]);\n                console.log('allPrices', allPrices)\n                //this.state.contractsAndValues.push(res.data[0][0])\n                console.log('res.data', res.data[0][0])\n                this.state.contractsAndValues.push(allPrices[index])\n                console.log('this.state.contractsAndValues AFTER ALL PRICES ADDED', this.state.contractsAndValues)\n                \n            } \n                \n            \n            ).then(this.makeSingleObj())).catch((err) => console.log(err));\n\n}\n\nasync makeSingleObj() {\n    console.log('this.state.allContracts[this.props.marketIndex]', this.state.allContracts[this.props.marketIndex])\n    console.log('this.state.contractsAndValues', this.state.contractsAndValues)\n    const allContracts = await this.state.allContracts[this.props.marketIndex]\n    const allValues = await  this.state.contractsAndValues\n\n    const comboArray = [];\n    const realTimeData = [];\n    const runCombineLoop = await allContracts.map((contract, x) => {\n        console.log(\"this is in combineLoop. What's in contract ðŸ¤” \", contract)\n        //comboArray.push(contract)\n        //console.log('comboArray', comboArray)\n        \n        //realTimeData.push(fullObj[y]);\n        \n        // 33 rows in Array \n        allValues.map((value, y) => {\n            //console.log('ðŸ¥µ value', value)\n            if (y === x){\n            const fullObj = {\"contract_id\": contract.contract_id, \"name\": contract.name, \"image\": contract.image, \"price\" : value.best_buy_yes_offer, \"priceChange\": (value.last_trade_price - value.last_close_price).toFixed(2)}\n            console.log('ðŸ¤— contract + value (finalObj)', fullObj )\n            realTimeData.push(fullObj);\n            console.log('realTimeData final OBJ', realTimeData)\n        }\n            return this.state.realTimeData.push(realTimeData)\n\n        })\n    })\n\n    this.renderLiveContracts()\n}\n\n\nasync renderLiveContracts() {\n    console.log('call made it out with data in state!', this.state.realTimeData[0])\n\n    const realTimeData = this.state.realTimeData[0]\n    console.log('realTimeData in the renderLiveContracts() ', realTimeData)\n    \n     realTimeData.map((row, k) => {\n      \n        return <LiveContracts \n                contractName={row.name}\n                contractAvatar={row.image}\n                contractPrice={row.price}\n                contractChange={row.priceChange}\n                /> \n        \n            })\n\n           \n\n        \n    \n\n}\n\n\n\n\n\n\nrender() {\n\n  return (\n          \n\n<div className=\"parent\" >\n             <div className=\"one\" >\n             <button onClick={this.getContractIds} > Get ContractIds </button>\n             <button onClick={this.getContractPrices} >Grab Contract Prices</button>\n             \n\n             \n             </div>\n\n    <SlideToggle\n    duration={300}\n    collapsed\n    render={({\n      toggle,\n      setCollapsibleElement\n    }) => (\n\n        <div className={ toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive'} onClick={toggle} > \n       \n        <div className=\"LiveMarkets\" onClick={this.renderLiveContracts}  >\n        {this.props.contractName} \n        \n    \n          </div>\n          <SlideToggle >\n              <div className=\"slide-toggle__box\" ref={setCollapsibleElement}   >\n              \n            \n\n           \n           {this.renderLiveContracts}\n           \n    \n      \n            \n\n            <MarketBlurb \n            blurb=\"PredictItâ€™s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\"\n            blurbLink=\" here.\"\n            \n            />\n        \n        </div>\n       \n        </SlideToggle>\n\n\n      </div>\n      )}\n    \n      />\n      </div>\n\n           \n  )\n }\n}\nexport default LiveMarkets;\n\n\n\n\n\n\n/*\n\nconsole.log('this.state.valuesLength', this.state.valuesLength)\n\n\n        for ( var i = 0; i < this.state.contractIds.length; i++){\n            const rmpURL = 'https://realmoneypolls.herokuapp.com/api/value/value_list/' + this.state.contractIds[i];\n            contractPrices.push(axios.get(rmpURL));\n            //this.state.contractsAndValues.push(contractPrices)\n            console.log('contractPrices in values list loop', contractPrices)\n            console.log('this.state.contractsAndValues in values loop call', this.state.contractsAndValues[0])\n            console.log('this.state.contractsAndValues.length', this.state.contractsAndValues.length)\n            \n        }\n    \n        Promise.all(contractPrices).then((response) => \n        console.log('response', response) +\n        \n            response.map((res, index)=> {\n                \n                this.state.contractsAndValues.push(res.data[0][0])\n                console.log('res.data', res.data[0][0])\n                console.log('this.state.contractsAndValues should be 33 and 15', this.state.contractsAndValues)\n            \n            } \n                \n            \n            )).catch((err) => console.log(err));\n\n            console.log(this.state.contractsAndValues)\n\n*/"]},"metadata":{},"sourceType":"module"}