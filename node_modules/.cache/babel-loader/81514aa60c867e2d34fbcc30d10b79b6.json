{"ast":null,"code":"var _jsxFileName = \"/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js\";\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts';\nimport MarketBlurb from '../MarketBlurb/MarketBlurb';\nimport EventObj from '../EventObj/EventObj';\nimport axios from 'axios';\n\nclass LiveMarkets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.contracts = [];\n    this.values = [];\n    this.markets = [];\n    this.json = [];\n    this.length = \"\";\n\n    this.logState = () => {\n      console.log('hello');\n      console.log('this.state.allContracts loggedState()', this.state.allContracts);\n      let loopAllContracts = this.state.allContracts;\n      loopAllContracts.map((row, k) => {\n        if (k !== 0 && k !== 1) {\n          console.log('k within LOOP logState()', k);\n          console.log('row within LOOP logState()', row);\n          this.state.marketContracts.push(row);\n        }\n      });\n    };\n\n    this.getContractIds = () => {\n      console.log(\"getContractIds() was FIRED!\");\n      console.log('this.state.contractIds[this.props.marketIndex]', this.state.contractIds[this.props.marketIndex]);\n      const contractRow = this.state.allContracts[this.props.marketIndex];\n\n      if (contractRow !== undefined) {\n        const contractRows = contractRow.map((row, y) => {\n          //console.log('y IN CONTRACT IDS', y)\n          //console.log('row IN CONTRACT IDS', row.contract_id)\n          this.state.contractIds.push(row.contract_id);\n          return;\n        }); // now we should have the contractIds\n\n        return console.log('INSIDE getContractIds() / do we have contractIds? this.state.contractIds', this.state.contractIds); // return this.fetchContractPrices();\n      } else {\n        console.log('this.state.contractIds', this.state.contractIds);\n      }\n\n      return this.getContractPrices(this.state.contractIds);\n    };\n\n    this.sayHello = () => {\n      console.log('does next .then work????????');\n    };\n\n    this.getContractPrices = ids => {\n      let contractIds = this.state.contractIds;\n      let contractPrices = [];\n      let allPrices = [];\n      console.log('this.state.valuesLength', this.state.contractIds.length);\n\n      for (var i = 0; i < contractIds.length; i++) {\n        const rmpURL = 'https://realmoneypolls.herokuapp.com/api/value/value_list/' + this.state.contractIds[i];\n        contractPrices.push(axios.get(rmpURL)); //this.state.contractsAndValues.push(contractPrices)\n\n        console.log('contractPrices in values list loop', contractPrices);\n        console.log('this.state.contractsAndValues.length', this.state.contractsAndValues.length);\n      } // Inform Promises how to behave\n\n\n      Promise.all(contractPrices).then(response => console.log('response', response) + response.map((res, index) => {\n        allPrices.push(res.data[0][0]);\n        console.log('allPrices', allPrices); //this.state.contractsAndValues.push(res.data[0][0])\n\n        console.log('res.data', res.data[0][0]);\n        this.state.contractsAndValues.push(allPrices[index]);\n        console.log('this.state.contractsAndValues AFTER ALL PRICES ADDED', this.state.contractsAndValues);\n      }).then(this.sayHello())).catch(err => console.log(err));\n    };\n\n    this.state = {\n      toggleSwitch: false,\n      marketIds: this.props.markets,\n      contractIds: [],\n      allContracts: [],\n      marketContracts: [],\n      contractsAndValues: [],\n      onlyValues: [],\n      jsonObj: [],\n      valuesLength: \"\",\n      objLength: [],\n      almostThere: [],\n      currentNames: [],\n      currentPrices: [],\n      loopThruTheseContracts: []\n    }; // END OF STATE\n  } // END OF CONSTRUCTOR\n\n\n  //Notes: \n  // Need to Get all Market Ids thru props\n  // Need to get all Contracts where Market Ids exist\n  // Need to get all Values where Contract Ids exist \n  // One JSON object to map Contracts and Values\n  // Loop thru JSON, render values in <LiveContracts /> component\n  componentDidMount() {\n    let marketIds = ['3633', '3653'];\n    console.log('this.state.marketIds', this.state.marketIds);\n    let themContracts = [];\n\n    for (var i = 0; i < marketIds.length; i++) {\n      const rmpURL = 'https://realmoneypolls.herokuapp.com/api/contract/contract_list/' + marketIds[i];\n      themContracts.push(axios.get(rmpURL));\n      this.state.allContracts.push(themContracts);\n      console.log('themContracts', themContracts);\n    }\n\n    Promise.all(themContracts).then(response => console.log('INSIDE componentDidMount() ðŸ’¬ promise response', response) + response.map((res, index) => {\n      this.state.allContracts.push(res.data[0]);\n      console.log('INSIDE componentDidMount() ðŸ‘‹ this.state.allContracts', this.state.allContracts); //this.getContractIds();\n    })).catch(err => console.log(err));\n  } //  Coming out of componentDidMount(), got this.state.allContracts\n\n\n  checkMarketContracts() {\n    console.log('this.state.marketContracts checkMarketContracts()', this.state.marketContracts);\n  } // Coming out of logState() I can get contractIds for each Contract\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"parent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.logState(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }, \" Log Current State \"), React.createElement(\"button\", {\n      onClick: this.getContractIds,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \" Get ContractIds \"), React.createElement(\"button\", {\n      onClick: this.getContractPrices,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, \"Grab Contract Prices\")), React.createElement(SlideToggle, {\n      duration: 300,\n      collapsed: true,\n      render: ({\n        toggle,\n        setCollapsibleElement\n      }) => React.createElement(\"div\", {\n        className: toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive',\n        onClick: this.props.toggleMe,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"LiveMarkets\",\n        onClick: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, this.props.contractName), React.createElement(SlideToggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"slide-toggle__box\",\n        ref: setCollapsibleElement,\n        onClick: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"No Contract Data Here\"), console.log('no contract data here'), React.createElement(MarketBlurb, {\n        blurb: \"PredictIt\\u2019s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\",\n        blurbLink: \" here.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LiveMarkets;\n/*\n\nconsole.log('this.state.valuesLength', this.state.valuesLength)\n\n\n        for ( var i = 0; i < this.state.contractIds.length; i++){\n            const rmpURL = 'https://realmoneypolls.herokuapp.com/api/value/value_list/' + this.state.contractIds[i];\n            contractPrices.push(axios.get(rmpURL));\n            //this.state.contractsAndValues.push(contractPrices)\n            console.log('contractPrices in values list loop', contractPrices)\n            console.log('this.state.contractsAndValues in values loop call', this.state.contractsAndValues[0])\n            console.log('this.state.contractsAndValues.length', this.state.contractsAndValues.length)\n            \n        }\n    \n        Promise.all(contractPrices).then((response) => \n        console.log('response', response) +\n        \n            response.map((res, index)=> {\n                \n                this.state.contractsAndValues.push(res.data[0][0])\n                console.log('res.data', res.data[0][0])\n                console.log('this.state.contractsAndValues should be 33 and 15', this.state.contractsAndValues)\n            \n            } \n                \n            \n            )).catch((err) => console.log(err));\n\n            console.log(this.state.contractsAndValues)\n\n*/","map":{"version":3,"sources":["/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js"],"names":["React","SlideToggle","LiveContracts","MarketBlurb","EventObj","axios","LiveMarkets","Component","constructor","props","contracts","values","markets","json","length","logState","console","log","state","allContracts","loopAllContracts","map","row","k","marketContracts","push","getContractIds","contractIds","marketIndex","contractRow","undefined","contractRows","y","contract_id","getContractPrices","sayHello","ids","contractPrices","allPrices","i","rmpURL","get","contractsAndValues","Promise","all","then","response","res","index","data","catch","err","toggleSwitch","marketIds","onlyValues","jsonObj","valuesLength","objLength","almostThere","currentNames","currentPrices","loopThruTheseContracts","componentDidMount","themContracts","checkMarketContracts","render","toggle","setCollapsibleElement","toggleMe","contractName"],"mappings":"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","sourcesContent":["\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts'\nimport MarketBlurb from '../MarketBlurb/MarketBlurb'\nimport EventObj from '../EventObj/EventObj'\nimport axios from 'axios';\n\n\ntype Props = {\n    getContractIds: Function,\n  };\n\nclass LiveMarkets extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n        toggleSwitch : false,\n        marketIds : this.props.markets,\n        contractIds: [],\n        allContracts: [],\n        marketContracts: [],\n        contractsAndValues: [],\n        onlyValues: [],\n        jsonObj: [],\n        valuesLength: \"\",\n        objLength: [], \n        almostThere: [],\n        currentNames: [],\n        currentPrices:[],\n        loopThruTheseContracts: []\n\n\n\n    }; // END OF STATE\n\n\n\n\n\n  } // END OF CONSTRUCTOR\n\n  contracts = []\n  values = []\n  markets = []\n  json = []\n  length = \"\"\n\n\n    //Notes: \n    // Need to Get all Market Ids thru props\n    // Need to get all Contracts where Market Ids exist\n    // Need to get all Values where Contract Ids exist \n    // One JSON object to map Contracts and Values\n    // Loop thru JSON, render values in <LiveContracts /> component\n\n     \n\n\n\n  componentDidMount() {\n  \n    let marketIds = ['3633', '3653']\n    console.log('this.state.marketIds', this.state.marketIds)\n\n    let themContracts = [];\n\n    for ( var i = 0; i < marketIds.length; i++){\n        const rmpURL = 'https://realmoneypolls.herokuapp.com/api/contract/contract_list/' + marketIds[i];\n        themContracts.push(axios.get(rmpURL));\n        this.state.allContracts.push(themContracts)\n        console.log('themContracts', themContracts)\n    }\n\n    Promise.all(themContracts).then((response) => \n    console.log('INSIDE componentDidMount() ðŸ’¬ promise response', response) +\n    \n        response.map((res, index) => {\n            this.state.allContracts.push(res.data[0])\n            console.log('INSIDE componentDidMount() ðŸ‘‹ this.state.allContracts', this.state.allContracts)\n            //this.getContractIds();\n        }\n        )).catch((err) => console.log(err));\n        \n }\n\n\n\n //  Coming out of componentDidMount(), got this.state.allContracts\n\n \n \nlogState = () => {\n    console.log('hello')\n    console.log('this.state.allContracts loggedState()', this.state.allContracts)\n\n    let loopAllContracts = this.state.allContracts\n\n    loopAllContracts.map((row, k) => {\n        if (k !== 0 && k !== 1){\n            console.log('k within LOOP logState()', k)\n            console.log('row within LOOP logState()', row)\n            this.state.marketContracts.push(row)\n\n        }\n    })\n}\n\n\ncheckMarketContracts(){\n    console.log('this.state.marketContracts checkMarketContracts()', this.state.marketContracts)\n}\n\n\n// Coming out of logState() I can get contractIds for each Contract\n\ngetContractIds = () => {\n    console.log(\"getContractIds() was FIRED!\")\n    console.log('this.state.contractIds[this.props.marketIndex]', this.state.contractIds[this.props.marketIndex])\n  const contractRow = this.state.allContracts[this.props.marketIndex]\n  if (contractRow !== undefined) {\n      \n  const contractRows = contractRow.map((row, y) => {\n      //console.log('y IN CONTRACT IDS', y)\n      //console.log('row IN CONTRACT IDS', row.contract_id)\n      this.state.contractIds.push(row.contract_id)\n      \n      return;\n\n  })\n  \n\n  // now we should have the contractIds\n\n  return console.log('INSIDE getContractIds() / do we have contractIds? this.state.contractIds', this.state.contractIds);\n  \n\n  \n  // return this.fetchContractPrices();\n} else {\n\n  console.log('this.state.contractIds', this.state.contractIds)\n}\n    \n    return this.getContractPrices(this.state.contractIds)\n\n}\n\nsayHello = () => {\n    console.log('does next .then work????????')\n}\n\n\ngetContractPrices = (ids) => {\n    let contractIds = this.state.contractIds\n    let contractPrices = [];\n    let allPrices = [];\n        console.log('this.state.valuesLength', this.state.contractIds.length);\n        for ( var i = 0; i < contractIds.length; i++){\n            const rmpURL = 'https://realmoneypolls.herokuapp.com/api/value/value_list/' + this.state.contractIds[i];\n            contractPrices.push(axios.get(rmpURL));\n            //this.state.contractsAndValues.push(contractPrices)\n            console.log('contractPrices in values list loop', contractPrices)\n            console.log('this.state.contractsAndValues.length', this.state.contractsAndValues.length)\n            \n        }\n    \n        // Inform Promises how to behave\n\n        Promise.all(contractPrices).then((response) => \n        console.log('response', response) +\n        \n            response.map((res, index) => \n            \n            {\n                allPrices.push(res.data[0][0]);\n                console.log('allPrices', allPrices)\n                //this.state.contractsAndValues.push(res.data[0][0])\n                console.log('res.data', res.data[0][0])\n                this.state.contractsAndValues.push(allPrices[index])\n                console.log('this.state.contractsAndValues AFTER ALL PRICES ADDED', this.state.contractsAndValues)\n                \n            } \n                \n            \n            ).then(this.sayHello())).catch((err) => console.log(err));\n\n}\n\n\n\n\n\n\nrender() {\n\n  return (\n          \n\n<div className=\"parent\" >\n             <div className=\"one\" >\n             <button onClick={() => this.logState()}> Log Current State </button>\n             <button onClick={this.getContractIds} > Get ContractIds </button>\n             <button onClick={this.getContractPrices} >Grab Contract Prices</button>\n             \n\n             \n             </div>\n\n    <SlideToggle\n    duration={300}\n    collapsed\n    render={({\n      toggle,\n      setCollapsibleElement\n    }) => (\n\n        <div className={ toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive'} onClick={this.props.toggleMe} > \n       \n        <div className=\"LiveMarkets\" onClick={toggle} >\n        {this.props.contractName} \n        \n    \n          </div>\n          <SlideToggle >\n              <div className=\"slide-toggle__box\" ref={setCollapsibleElement}  onClick={toggle}>\n              \n            \n\n            <div >No Contract Data Here</div>\n            {console.log('no contract data here')}\n    \n\n            \n\n            <MarketBlurb \n            blurb=\"PredictItâ€™s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\"\n            blurbLink=\" here.\"\n            \n            />\n        \n        </div>\n       \n        </SlideToggle>\n\n\n      </div>\n      )}\n    \n      />\n      </div>\n\n           \n  )\n }\n}\nexport default LiveMarkets;\n\n\n\n\n\n\n/*\n\nconsole.log('this.state.valuesLength', this.state.valuesLength)\n\n\n        for ( var i = 0; i < this.state.contractIds.length; i++){\n            const rmpURL = 'https://realmoneypolls.herokuapp.com/api/value/value_list/' + this.state.contractIds[i];\n            contractPrices.push(axios.get(rmpURL));\n            //this.state.contractsAndValues.push(contractPrices)\n            console.log('contractPrices in values list loop', contractPrices)\n            console.log('this.state.contractsAndValues in values loop call', this.state.contractsAndValues[0])\n            console.log('this.state.contractsAndValues.length', this.state.contractsAndValues.length)\n            \n        }\n    \n        Promise.all(contractPrices).then((response) => \n        console.log('response', response) +\n        \n            response.map((res, index)=> {\n                \n                this.state.contractsAndValues.push(res.data[0][0])\n                console.log('res.data', res.data[0][0])\n                console.log('this.state.contractsAndValues should be 33 and 15', this.state.contractsAndValues)\n            \n            } \n                \n            \n            )).catch((err) => console.log(err));\n\n            console.log(this.state.contractsAndValues)\n\n*/"]},"metadata":{},"sourceType":"module"}