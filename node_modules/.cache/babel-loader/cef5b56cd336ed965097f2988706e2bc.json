{"ast":null,"code":"var _jsxFileName = \"/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js\";\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts';\nimport MarketBlurb from '../MarketBlurb/MarketBlurb';\nimport axios from 'axios';\nimport { objectTypeSpreadProperty, nullLiteral, breakStatement } from '@babel/types';\n\nclass LiveMarkets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.globalContracts = [];\n    this.globalContractIds = [];\n    this.globalNames = [];\n    this.globalArray = [];\n    this.bigObj = [];\n    this.globalNamesLength = \"\";\n\n    this.toggleActive = () => {\n      this.setState({\n        active: !this.state.active\n      });\n    };\n\n    this.state = {\n      active: false,\n      contracts: [],\n      contractNames: [],\n      contractIds: [],\n      contractPrices: [],\n      globalNames: [],\n      globalPrices: []\n    };\n    this.createContracts = this.createContracts.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  valuesLoop() {\n    // check contractIds array -- see if they're all there\n    console.log('this.globalContractIds -- BEFORE valuesLoop() begins...', this.globalContractIds);\n    console.log('this.globalArray -- BEFORE valuesLoop() begins...', this.globalArray); // checked!\n\n    const idsArray = this.globalContractIds;\n    this.values = idsArray.forEach((array, index) => {\n      if (this.globalArray.length < 1) {\n        //console.log('array', array)\n        axios.get('http://localhost:3002/api/value/value_list/' + array).then(res => {\n          const priceGroupings = {\n            \"contract_id\": array,\n            \"contractPrice\": res.data[0][0].best_buy_yes_offer,\n            \"contractChange\": (res.data[0][0].last_trade_price - res.data[0][0].last_close_price).toFixed(2)\n          };\n          this.globalArray.push(priceGroupings);\n          setTimeout(this.createContracts(), 3000);\n          return;\n        }); // end of prices call\n      } // if statement\n\n    });\n  }\n\n  componentDidMount() {\n    //Get contracts\n    axios.get('http://localhost:3002/api/contract/contract_list/' + this.props.mId1Title).then(res => {\n      // this.setState({ contracts: res.data[0] });\n      console.log('res.data[0] NO IDs in Global Contracts', res.data[0]);\n      this.globalContracts.push(res.data[0]);\n      const contracts = this.globalContracts;\n      console.log('contracts[0] how many b4 i run this loop?', contracts[0]);\n      contracts[0].map((contract, index) => {\n        console.log('this.globalContracts BEFORE ADDING TO ARRAY', this.globalContracts);\n        console.log('this.globalContractIds BEFORE ADDING TO ARRAY', this.globalContractIds);\n        this.globalContractIds.push(contract.contract_id);\n        const namesUrls = {\n          \"name\": contract.name,\n          \"url\": contract.image,\n          \"id\": contract.contract_id\n        };\n        this.globalNames.push(namesUrls);\n        this.globalNamesLength = this.globalNames.length;\n      });\n      this.setState({\n        contractIds: this.globalContractIds\n      });\n      return;\n    });\n  }\n\n  createContracts() {\n    //setTimeout(5500)\n    console.log('this.globalContracts[0].length', this.globalContracts[0].length);\n    this.globalContracts[0].map((row, index) => {\n      console.log('row.contract_id', row.contract_id);\n      this.globalArray.map((line, k) => {\n        if (index === k) {\n          console.log('row.id INSIDE', row.contract_id);\n          console.log('line.id INSIDE', line.id);\n          console.log('k', k);\n          console.log('index', index);\n          const jointObj = {\n            \"name\": row.name,\n            \"url\": row.url,\n            \"contractPrice\": line.contractPrice,\n            \"contractChange\": line.contractChange,\n            \"contract_id\": line.contract_id,\n            \"id\": row.id,\n            \"repeat\": 0\n          };\n          console.log('this.jointObj', jointObj);\n          this.bigObj.push(jointObj);\n          console.log('this.bogObj', this.bigObj);\n        } else {\n          breakStatement();\n        }\n      });\n    });\n\n    if (this.bigObj.indexOf(this.bigObj.id) > -1) {\n      console.log('its False');\n    } else console.log('its true', this.bigObj.id);\n\n    console.log('row index'); //this.bigObj.splice(this.bigObj.id)\n\n    console.log('this.bigObj in createContracts().length', this.bigObj.length);\n    console.log('this.bigObj in createContracts()', this.bigObj);\n  } //console.log('this.globalArray prices -- WITHIN createContracts()', this.globalArray)\n  //console.log('this.globalContracts --  WITHIN createContracts()', this.globalContracts)\n  //console.log('this.globalNames --  WITHIN createContracts()', this.globalNames)\n\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"parent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }), React.createElement(SlideToggle, {\n      duration: 300,\n      collapsed: true,\n      render: ({\n        toggle,\n        progress,\n        setCollapsibleElement,\n        range\n      }) => React.createElement(\"div\", {\n        className: toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive',\n        onClick: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"LiveMarkets\",\n        onClick: this.valuesLoop(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, this.props.contractName), React.createElement(SlideToggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"slide-toggle__box\",\n        ref: setCollapsibleElement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, this.bigObj.map((obj, index) => {\n        const name = obj.name;\n        const url = obj.url;\n        const price = obj.contractPrice;\n        const change = obj.contractChange;\n        return React.createElement(LiveContracts, {\n          key: index,\n          contractName: name,\n          contractAvatar: url,\n          contractPrice: price,\n          contractChange: change,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        });\n      }), React.createElement(MarketBlurb, {\n        blurb: \"PredictIt\\u2019s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\",\n        blurbLink: \" here.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LiveMarkets;","map":{"version":3,"sources":["/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js"],"names":["React","SlideToggle","LiveContracts","MarketBlurb","axios","objectTypeSpreadProperty","nullLiteral","breakStatement","LiveMarkets","Component","constructor","props","globalContracts","globalContractIds","globalNames","globalArray","bigObj","globalNamesLength","toggleActive","setState","active","state","contracts","contractNames","contractIds","contractPrices","globalPrices","createContracts","bind","componentDidMount","valuesLoop","console","log","idsArray","values","forEach","array","index","length","get","then","res","priceGroupings","data","best_buy_yes_offer","last_trade_price","last_close_price","toFixed","push","setTimeout","mId1Title","map","contract","contract_id","namesUrls","name","image","row","line","k","id","jointObj","url","contractPrice","contractChange","indexOf","render","toggle","progress","setCollapsibleElement","range","contractName","obj","price","change"],"mappings":"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","sourcesContent":["\n\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts'\nimport MarketBlurb from '../MarketBlurb/MarketBlurb'\nimport axios from 'axios';\nimport { objectTypeSpreadProperty, nullLiteral, breakStatement } from '@babel/types';\n\n\nclass LiveMarkets extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n        active: false,\n        contracts: [],\n        contractNames: [],\n        contractIds: [],\n        contractPrices: [],\n        globalNames: [],\n        globalPrices: []\n      \n\n\n    };\n\n    this.createContracts = this.createContracts.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n\n  \n  }\n\n  globalContracts = [];\n  globalContractIds = [];\n  globalNames = [];\n  globalArray = [];\n  bigObj= [];\n  globalNamesLength = \"\"\n\n\n  valuesLoop(){\n    // check contractIds array -- see if they're all there\n    console.log('this.globalContractIds -- BEFORE valuesLoop() begins...', this.globalContractIds);\n    console.log('this.globalArray -- BEFORE valuesLoop() begins...', this.globalArray);\n    // checked!\n\n    const idsArray = this.globalContractIds\n    this.values = idsArray.forEach((array, index) => {\n        if (this.globalArray.length < 1 ){\n\n        //console.log('array', array)\n       \n        axios.get('http://localhost:3002/api/value/value_list/' + array).then(res =>{\n\n        const priceGroupings = {\"contract_id\": array, \"contractPrice\": res.data[0][0].best_buy_yes_offer, \"contractChange\": (res.data[0][0].last_trade_price - res.data[0][0].last_close_price).toFixed(2)}\n        this.globalArray.push(priceGroupings)\n        \n        setTimeout(this.createContracts(), 3000);\n        \n     \n\n     return;\n        \n    \n    }) \n    // end of prices call\n    } // if statement\n    });\n    }\n\n  \n\n   componentDidMount() {\n\n\n      //Get contracts\n   axios.get('http://localhost:3002/api/contract/contract_list/'+ this.props.mId1Title).then(res => { \n        // this.setState({ contracts: res.data[0] });\n        console.log('res.data[0] NO IDs in Global Contracts', res.data[0])\n        this.globalContracts.push(res.data[0])\n        const contracts = this.globalContracts\n        console.log('contracts[0] how many b4 i run this loop?', contracts[0])\n\n        contracts[0].map((contract, index) => {\n            \n            console.log('this.globalContracts BEFORE ADDING TO ARRAY', this.globalContracts)\n            console.log('this.globalContractIds BEFORE ADDING TO ARRAY', this.globalContractIds)\n             this.globalContractIds.push(contract.contract_id)\n             const namesUrls = {\"name\": contract.name, \"url\": contract.image, \"id\": contract.contract_id }\n             this.globalNames.push(namesUrls)\n             this.globalNamesLength = this.globalNames.length\n\n            \n        }\n        )\n        this.setState({ contractIds : this.globalContractIds})\n        return ;\n        \n    }\n    );\n\n    }\n\n\n\n  toggleActive = () => {\n\n      this.setState({ active: !this.state.active })\n  }\n\n\n  createContracts(){\n\n   //setTimeout(5500)\n\n  console.log('this.globalContracts[0].length', this.globalContracts[0].length)\n  \n \n    this.globalContracts[0].map((row, index)=>{\n        console.log('row.contract_id', row.contract_id)\n\n        \n            this.globalArray.map((line, k) => {\n                if ( index === k) {\n            console.log('row.id INSIDE', row.contract_id)      \n            console.log('line.id INSIDE', line.id)\n            console.log('k', k)\n            console.log('index', index)\n           \n           \n          \n            \n\n            const jointObj = {\"name\": row.name, \"url\": row.url, \"contractPrice\": line.contractPrice, \"contractChange\": line.contractChange, \"contract_id\": line.contract_id, \"id\": row.id, \"repeat\": 0}\n            console.log('this.jointObj', jointObj)\n            this.bigObj.push(jointObj);\n            console.log('this.bogObj', this.bigObj);\n           \n        } else {\n            breakStatement();\n        }\n         \n    })\n    \n})\n\n\n   \n\n    \n    if (this.bigObj.indexOf(this.bigObj.id) > -1){\n        console.log('its False')\n    }\n    else \n    console.log('its true', this.bigObj.id)\n    console.log('row index')\n    //this.bigObj.splice(this.bigObj.id)\n    \n\n    \n  \n      \n\n    \n\n\n\n\n\n\n    \n\nconsole.log('this.bigObj in createContracts().length', this.bigObj.length)\nconsole.log('this.bigObj in createContracts()', this.bigObj)\n\n\n\n\n\n}\n\n    //console.log('this.globalArray prices -- WITHIN createContracts()', this.globalArray)\n    //console.log('this.globalContracts --  WITHIN createContracts()', this.globalContracts)\n    //console.log('this.globalNames --  WITHIN createContracts()', this.globalNames)\n\n\n   \n    \n\n\n\n \n\n\nrender() {\n\n \n  return (\n         <div className=\"parent\">\n             <div className=\"one\">\n                 \n             </div>\n\n    <SlideToggle\n    duration={300}\n    collapsed\n    render={({\n      toggle,\n      progress,\n      setCollapsibleElement,\n      range,\n    }) => (\n\n        <div className={ toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive'} onClick={toggle}  >\n        \n        <div className=\"LiveMarkets\"  onClick={this.valuesLoop()} >\n        {this.props.contractName}\n    \n          </div>\n          <SlideToggle >\n              <div className=\"slide-toggle__box\" ref={setCollapsibleElement}>\n                  \n               \n               {\n               \n               this.bigObj.map((obj, index) => {\n                const name = obj.name;\n                const url = obj.url;\n                const price = obj.contractPrice;\n                const change = obj.contractChange;\n                return (\n                     \n                            <LiveContracts\n                            key={index}\n                            contractName={name}\n                            contractAvatar={url}\n                            contractPrice={price}\n                            contractChange={change}\n                            \n                         \n                            />\n                )\n\n\n               })\n               }\n\n              \n\n            <MarketBlurb \n            blurb=\"PredictIt’s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\"\n            blurbLink=\" here.\"\n            \n            />\n        \n        </div>\n       \n        </SlideToggle>\n\n       \n        \n\n   \n\n\n      \n      </div>\n      )}\n    \n      />\n      </div>\n  );\n }\n}\nexport default LiveMarkets;"]},"metadata":{},"sourceType":"module"}