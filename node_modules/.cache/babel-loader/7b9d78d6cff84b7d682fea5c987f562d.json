{"ast":null,"code":"var _jsxFileName = \"/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js\";\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts';\nimport MarketBlurb from '../MarketBlurb/MarketBlurb';\nimport axios from 'axios';\nimport { objectTypeSpreadProperty, nullLiteral, breakStatement } from '@babel/types';\n\nclass LiveMarkets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.globalContracts = [];\n    this.globalContractIds = [];\n    this.globalNames = [];\n    this.globalArray = [];\n    this.raw_prices = [];\n    this.bigObj = [];\n    this.globalNamesLength = \"\";\n    this.putIndex = [];\n    this.market_ids = [];\n    this.marketIds = [];\n    this.largestObj = [];\n    this.unique_array = [];\n    this.state = {\n      active: false,\n      contracts: [],\n      contractNames: [],\n      contractIds: [],\n      contractPrices: [],\n      globalNames: [],\n      globalArray: [],\n      globalPrices: [],\n      unique_array: []\n    };\n    this.createContracts = this.createContracts.bind(this);\n    this.getContractPrices = this.getContractPrices.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  getContractPrices(array) {\n    // check contractIds array -- see if they're all there\n    console.log('this.globalContractIds -- BEFORE valuesLoop() begins...', this.globalContractIds);\n    console.log('this.globalArray -- BEFORE valuesLoop() begins...', this.globalArray); // checked!\n\n    const idsArray = this.globalContractIds;\n    console.log('idsArray TIP TOP of getContractPrices', idsArray);\n    idsArray.forEach((array, index) => {\n      axios.get('http://localhost:3002/api/value/value_list/' + array).then(res => {\n        console.log('ðŸš¨');\n        let priceGroupings = {\n          \"contract_id\": array,\n          \"contractPrice\": res.data[0][0].best_buy_yes_offer,\n          \"contractChange\": (res.data[0][0].last_trade_price - res.data[0][0].last_close_price).toFixed(2)\n        };\n        const rawPrices = res.data[0][0];\n        this.raw_prices.push(rawPrices);\n        const allPrices = this.raw_prices;\n        this.globalArray.push(priceGroupings);\n        const gArr = this.globalArray; // console.log('res.data[0][0] -- INSIDE GET PRICES LOOP', res.data[0][0]);\n        // console.log('this.globalArray -- INSIDE GET PRICES LOOP', this.globalArray);\n\n        return this.createContracts(allPrices);\n      }); // end of prices call\n    });\n  }\n\n  moveData(contracts) {\n    contracts[0].map((contract, index) => {\n      console.log('this.globalContracts[0] BEFORE ADDING TO ARRAY', this.globalContracts[0]);\n      console.log('this.globalContractIds BEFORE ADDING TO ARRAY', this.globalContractIds);\n      this.globalContractIds.push(contract.contract_id);\n      const namesUrls = {\n        \"name\": contract.name,\n        \"url\": contract.image,\n        \"id\": contract.contract_id,\n        \"index\": index\n      };\n      this.globalNames.push(namesUrls);\n      this.globalNamesLength = this.globalNames.length;\n      console.log('this.globalContractIds AFTER PUSHING TO ARRAY', this.globalContractIds);\n      return this.globalNames;\n    }); // END OF LOOP\n  }\n\n  async componentDidMount() {\n    this.marketIds.push(this.props.mId1Title);\n    console.log('this.marketIds', this.marketIds);\n\n    if (this.globalNames.length > 0) {\n      this.state.globalNames.push(this.globalNames);\n    }\n\n    this.marketIds.map((Id, index) => {\n      //Get contracts\n      axios.get('http://localhost:3002/api/contract/contract_list/' + Id).then(res => {\n        // this.setState({ contracts: res.data[0] });\n        console.log('res.data[0] NO IDs in Global Contracts', res.data[0]);\n        this.globalContracts.push(res.data[0]);\n        const contracts = this.globalContracts;\n        console.log('contracts[0] how many b4 i run this loop?', contracts[0]);\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, this.moveData(contracts));\n      } // something end of call \n      );\n    });\n  }\n\n  getLiveContractData(row, price) {\n    console.log('row', row);\n    console.log('price', price);\n    return React.createElement(\"div\", {\n      key: row,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \" \", React.createElement(LiveContracts, {\n      contractName: row.name,\n      contractAvatar: row.url,\n      contractPrice: price.contractPrice,\n      contractChange: price.contractChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), \" \");\n  }\n\n  createContracts(globalNames, globalArray, allPrices) {\n    globalNames = this.globalNames;\n    globalArray = this.globalArray;\n    console.log('globalNames INSIDE CREATE CONTRACTS METHOD', globalNames);\n    console.log('globalArray INSIDE CREATE CONTRACTS METHOD', globalArray);\n    console.log('allPrices INSIDE CREATE CONTRACTS METHOD', allPrices);\n    console.log('this.state.globalNames INSIDE CREATE CONTRACTS METHOD', this.state.globalNames);\n    console.log('this.state.globalArray INSIDE CREATE CONTRACTS METHOD', this.state.globalArray);\n    return globalNames.map(row => globalArray.map(price => row.id === price.contract_id ? React.createElement(\"div\", {\n      key: row.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, this.getLiveContractData(row, price), console.log('rowsssssss', row)) : null));\n    /*\n    \n    \n    \n    function removeDuplicates(bigObj){\n        let unique_array = []\n        for(let i = 0;i < bigObj.length; i++){\n            if(unique_array.indexOf(bigObj[i].id && bigObj[i].name) === -1){\n                //unique_array.push(\"id\" + arr[i].id)\n                //unique_array.push(\"name\" + arr[i].name)\n                //unique_array.push(\"contractPrice\" + arr[i].contractPrice)\n                //unique_array.push(\"contractChange\" + arr[i].contractChange)\n    \n                unique_array.push([bigObj[i].name]);\n                unique_array.push({\n                    \"id\": bigObj[i].id,\n                    \"contract_id\": bigObj[i].contract_id,\n                    \"name\": bigObj[i].name,\n                    \"url\": bigObj[i].url,\n                    \"contractPrice\": bigObj[i].contractPrice,\n                    \"contractChange\": bigObj[i].contractChange\n                });\n                \n    \n               \n            }\n    \n        }\n        return unique_array\n    }\n    \n    \n    console.log('removeDuplicates(this.bigObj)', removeDuplicates(this.bigObj));\n    console.log('this.unique_array', this.unique_array);\n    this.unique_array.push(removeDuplicates(this.bigObj))\n    console.log('removeDuplicates(this.bigObj)', removeDuplicates(this.bigObj));\n    console.log('this.unique_array HERE???????', this.unique_array);\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function removeDuplicates(arr){\n        let unique_array = []\n        for(let i = 0;i < arr.length; i++){\n            if(unique_array.indexOf(arr[i].id) === -1 && unique_array.indexOf(arr[i].contract_id) === -1 && unique_array.indexOf(arr[i].name) === -1 && unique_array.indexOf(arr[i].contractPrice) === -1 && unique_array.indexOf(arr[i].contractChange) === -1 && unique_array.indexOf(arr[i].url) === -1){\n                console.log('arr[i].name', arr[i].name )\n                console.log('arr[i].url', arr[i].url )\n                console.log('arr[i].contractPrices', arr[i].contractPrice )\n                console.log('arr[i].contractChange', arr[i].contractChange )\n                console.log('arr[i].contract_id', arr[i].contract_id )\n                console.log('arr[i].id', arr[i].id )\n                //this.bigObj = [];\n                const scrubbedData = {\"name\" : arr[i].name , \"url\" : arr[i].url ,  \"contractPrices\" : arr[i].contractPrice , \"contractChange\" : arr[i].contractChange, \"contract_id\" : arr[i].contract_id , \"id\" : arr[i].id}\n                const scrubby = [arr[i].name && arr[i].name];\n                console.log('scrubbedData', scrubbedData)\n                //this.bigObj.push(scrubbedData)\n                unique_array.push(scrubbedData)\n                \n                console.log('unique_array', unique_array)\n               \n            }\n        }\n        return unique_array\n    }\n    \n    console.log('removeDuplicates(this.bigObj)', removeDuplicates(this.bigObj)); \n    \n    \n    \n    \n    \n    this.globalArray.map((line, k) => {\n                    if ( index === k) {\n                console.log('row.id INSIDE', row.contract_id)      \n                console.log('line.id INSIDE', line.id)\n                console.log('k', k)\n                console.log('index', index)\n               \n               \n              \n                \n    \n                const jointObj = {\"name\": row.name, \"url\": row.url, \"contractPrice\": line.contractPrice, \"contractChange\": line.contractChange, \"contract_id\": line.contract_id, \"id\": row.id, \"repeat\": 0}\n                console.log('this.jointObj', jointObj)\n                this.bigObj.push(jointObj);\n                \n                console.log('this.bogObj', this.bigObj);\n               \n            } else {\n                breakStatement();\n            }\n             \n        })\n    \n    \n    \n    */\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"parent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, console.log('this.unique_array[5]', this.unique_array[5])), React.createElement(SlideToggle, {\n      duration: 300,\n      collapsed: true,\n      render: ({\n        toggle,\n        progress,\n        setCollapsibleElement,\n        range\n      }) => React.createElement(\"div\", {\n        className: toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive',\n        onChange: () => this.getContractPrices(),\n        onClick: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"LiveMarkets\",\n        onClick: () => this.createContracts(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, this.props.contractName), React.createElement(SlideToggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"slide-toggle__box\",\n        ref: setCollapsibleElement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, this.createContracts(), this.globalNames.map((row, index) => {\n        this.globalArray.map((line, k) => {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 350\n            },\n            __self: this\n          }, React.createElement(LiveContracts, {\n            contractAvatar: row.url,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 351\n            },\n            __self: this\n          }));\n        });\n      }), React.createElement(MarketBlurb, {\n        blurb: \"PredictIt\\u2019s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\",\n        blurbLink: \" here.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LiveMarkets;","map":{"version":3,"sources":["/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js"],"names":["React","SlideToggle","LiveContracts","MarketBlurb","axios","objectTypeSpreadProperty","nullLiteral","breakStatement","LiveMarkets","Component","constructor","props","globalContracts","globalContractIds","globalNames","globalArray","raw_prices","bigObj","globalNamesLength","putIndex","market_ids","marketIds","largestObj","unique_array","state","active","contracts","contractNames","contractIds","contractPrices","globalPrices","createContracts","bind","getContractPrices","componentDidMount","array","console","log","idsArray","forEach","index","get","then","res","priceGroupings","data","best_buy_yes_offer","last_trade_price","last_close_price","toFixed","rawPrices","push","allPrices","gArr","moveData","map","contract","contract_id","namesUrls","name","image","length","mId1Title","Id","getLiveContractData","row","price","url","contractPrice","contractChange","id","render","toggle","progress","setCollapsibleElement","range","contractName","line","k"],"mappings":"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","sourcesContent":["\n\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts'\nimport MarketBlurb from '../MarketBlurb/MarketBlurb'\nimport axios from 'axios';\nimport { objectTypeSpreadProperty, nullLiteral, breakStatement } from '@babel/types';\n\n\nclass LiveMarkets extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n        active: false,\n        contracts: [],\n        contractNames: [],\n        contractIds: [],\n        contractPrices: [],\n        globalNames: [],\n        globalArray: [],\n        globalPrices: [],\n        unique_array: [],\n      \n\n\n    };\n\n    this.createContracts = this.createContracts.bind(this);\n    this.getContractPrices = this.getContractPrices.bind(this)\n    this.componentDidMount = this.componentDidMount.bind(this);\n\n  \n  }\n\n  globalContracts = [];\n  globalContractIds = [];\n  globalNames = [];\n  globalArray = [];\n  raw_prices = [];\n  bigObj= [];\n  globalNamesLength = \"\" \n  putIndex = [];\n  market_ids = [];\n  marketIds = [];\n  largestObj = [];\n  unique_array = []\n\n\n  getContractPrices(array){\n    // check contractIds array -- see if they're all there\n    console.log('this.globalContractIds -- BEFORE valuesLoop() begins...', this.globalContractIds);\n    console.log('this.globalArray -- BEFORE valuesLoop() begins...', this.globalArray);\n    // checked!\n\n    const idsArray = this.globalContractIds\n    console.log('idsArray TIP TOP of getContractPrices', idsArray)\n    idsArray.forEach((array, index) => {\n\n        axios.get('http://localhost:3002/api/value/value_list/' + array).then(res =>{\n        console.log('ðŸš¨')\n        let priceGroupings = {\"contract_id\": array, \"contractPrice\": res.data[0][0].best_buy_yes_offer, \"contractChange\": (res.data[0][0].last_trade_price - res.data[0][0].last_close_price).toFixed(2)} \n        const rawPrices = res.data[0][0]\n        this.raw_prices.push(rawPrices)\n        const allPrices = this.raw_prices\n        this.globalArray.push(priceGroupings)\n        const gArr = this.globalArray\n        // console.log('res.data[0][0] -- INSIDE GET PRICES LOOP', res.data[0][0]);\n        // console.log('this.globalArray -- INSIDE GET PRICES LOOP', this.globalArray);\n        \n    \n        return this.createContracts(allPrices);\n\n    }) \n    // end of prices call\n\n  \n    });\n    }\n\n\n    moveData(contracts){\n        contracts[0].map((contract, index) => {\n        \n            console.log('this.globalContracts[0] BEFORE ADDING TO ARRAY', this.globalContracts[0])\n            console.log('this.globalContractIds BEFORE ADDING TO ARRAY', this.globalContractIds)\n             this.globalContractIds.push(contract.contract_id)\n             const namesUrls = {\"name\": contract.name, \"url\": contract.image, \"id\": contract.contract_id, \"index\": index }\n             this.globalNames.push(namesUrls)\n             this.globalNamesLength = this.globalNames.length\n             console.log('this.globalContractIds AFTER PUSHING TO ARRAY', this.globalContractIds)\n    \n             return this.globalNames\n        }\n\n        ) // END OF LOOP\n    }\n\n  \n\n   async componentDidMount() {\n    \n   \n    \n    this.marketIds.push(this.props.mId1Title)\n    console.log('this.marketIds', this.marketIds)\n    if (this.globalNames.length > 0){\n        this.state.globalNames.push(this.globalNames)\n    }\n\n    this.marketIds.map((Id, index)=>{\n\n           //Get contracts\n   axios.get('http://localhost:3002/api/contract/contract_list/'+ Id).then(res => { \n    // this.setState({ contracts: res.data[0] });\n    console.log('res.data[0] NO IDs in Global Contracts', res.data[0])\n    this.globalContracts.push(res.data[0])\n    const contracts = this.globalContracts\n    console.log('contracts[0] how many b4 i run this loop?', contracts[0])\n\n    return <div>{this.moveData(contracts)}</div>\n \n    \n}\n\n\n// something end of call \n\n);\n      \n   \n    \n\n})\n\n\n    }\n\n\n    getLiveContractData(row, price){\n        console.log('row', row)\n        console.log('price', price)\n\n        return  <div key={row} > <LiveContracts\n               \n                contractName={row.name}\n                contractAvatar={row.url}\n                contractPrice={price.contractPrice}\n                contractChange={price.contractChange}\n\n        /> </div>\n       \n\n    }\n\n\n\n  createContracts(globalNames, globalArray, allPrices) {\n\n    \n\n    globalNames = this.globalNames\n    globalArray = this.globalArray\n    console.log('globalNames INSIDE CREATE CONTRACTS METHOD', globalNames)\n    console.log('globalArray INSIDE CREATE CONTRACTS METHOD', globalArray)\n    console.log('allPrices INSIDE CREATE CONTRACTS METHOD', allPrices)\n    console.log('this.state.globalNames INSIDE CREATE CONTRACTS METHOD', this.state.globalNames)\n    console.log('this.state.globalArray INSIDE CREATE CONTRACTS METHOD', this.state.globalArray)\n\n \n    return globalNames.map(row => (\n        globalArray.map(price => (\n           row.id === price.contract_id ?\n        <div key={ row.id }>\n          { this.getLiveContractData(row, price) }\n          {console.log('rowsssssss', row)}\n        </div>\n        : (null) \n      ))\n      \n    ));\n\n           \n           \n\n\n\n\n\n\n\n\n/*\n\n\n\nfunction removeDuplicates(bigObj){\n    let unique_array = []\n    for(let i = 0;i < bigObj.length; i++){\n        if(unique_array.indexOf(bigObj[i].id && bigObj[i].name) === -1){\n            //unique_array.push(\"id\" + arr[i].id)\n            //unique_array.push(\"name\" + arr[i].name)\n            //unique_array.push(\"contractPrice\" + arr[i].contractPrice)\n            //unique_array.push(\"contractChange\" + arr[i].contractChange)\n\n            unique_array.push([bigObj[i].name]);\n            unique_array.push({\n                \"id\": bigObj[i].id,\n                \"contract_id\": bigObj[i].contract_id,\n                \"name\": bigObj[i].name,\n                \"url\": bigObj[i].url,\n                \"contractPrice\": bigObj[i].contractPrice,\n                \"contractChange\": bigObj[i].contractChange\n            });\n            \n\n           \n        }\n\n    }\n    return unique_array\n}\n\n\nconsole.log('removeDuplicates(this.bigObj)', removeDuplicates(this.bigObj));\nconsole.log('this.unique_array', this.unique_array);\nthis.unique_array.push(removeDuplicates(this.bigObj))\nconsole.log('removeDuplicates(this.bigObj)', removeDuplicates(this.bigObj));\nconsole.log('this.unique_array HERE???????', this.unique_array);\n\n\n\n\n\n\n\n\n\n\n\nfunction removeDuplicates(arr){\n    let unique_array = []\n    for(let i = 0;i < arr.length; i++){\n        if(unique_array.indexOf(arr[i].id) === -1 && unique_array.indexOf(arr[i].contract_id) === -1 && unique_array.indexOf(arr[i].name) === -1 && unique_array.indexOf(arr[i].contractPrice) === -1 && unique_array.indexOf(arr[i].contractChange) === -1 && unique_array.indexOf(arr[i].url) === -1){\n            console.log('arr[i].name', arr[i].name )\n            console.log('arr[i].url', arr[i].url )\n            console.log('arr[i].contractPrices', arr[i].contractPrice )\n            console.log('arr[i].contractChange', arr[i].contractChange )\n            console.log('arr[i].contract_id', arr[i].contract_id )\n            console.log('arr[i].id', arr[i].id )\n            //this.bigObj = [];\n            const scrubbedData = {\"name\" : arr[i].name , \"url\" : arr[i].url ,  \"contractPrices\" : arr[i].contractPrice , \"contractChange\" : arr[i].contractChange, \"contract_id\" : arr[i].contract_id , \"id\" : arr[i].id}\n            const scrubby = [arr[i].name && arr[i].name];\n            console.log('scrubbedData', scrubbedData)\n            //this.bigObj.push(scrubbedData)\n            unique_array.push(scrubbedData)\n            \n            console.log('unique_array', unique_array)\n           \n        }\n    }\n    return unique_array\n}\n\nconsole.log('removeDuplicates(this.bigObj)', removeDuplicates(this.bigObj)); \n\n\n\n\n\nthis.globalArray.map((line, k) => {\n                if ( index === k) {\n            console.log('row.id INSIDE', row.contract_id)      \n            console.log('line.id INSIDE', line.id)\n            console.log('k', k)\n            console.log('index', index)\n           \n           \n          \n            \n\n            const jointObj = {\"name\": row.name, \"url\": row.url, \"contractPrice\": line.contractPrice, \"contractChange\": line.contractChange, \"contract_id\": line.contract_id, \"id\": row.id, \"repeat\": 0}\n            console.log('this.jointObj', jointObj)\n            this.bigObj.push(jointObj);\n            \n            console.log('this.bogObj', this.bigObj);\n           \n        } else {\n            breakStatement();\n        }\n         \n    })\n\n\n\n*/\n\n\n    \n\n    \n \n\n}\n\n\n\n\nrender() {\n\n \n  return (\n         <div className=\"parent\">\n             <div className=\"one\">\n             {console.log('this.unique_array[5]', this.unique_array[5] )}\n             \n                 \n             </div>\n\n    <SlideToggle\n    duration={300}\n    collapsed\n    render={({\n      toggle,\n      progress,\n      setCollapsibleElement,\n      range,\n    }) => (\n\n        <div className={ toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive'} onChange={() => this.getContractPrices()} onClick={toggle} >\n       \n        <div className=\"LiveMarkets\"  onClick={() => this.createContracts()}  >\n        {this.props.contractName}\n    \n          </div>\n          <SlideToggle >\n              <div className=\"slide-toggle__box\" ref={setCollapsibleElement}>\n          \n               {\n\n                \n                this.createContracts()\n            }\n            {\n                this.globalNames.map((row, index ) => {\n                    this.globalArray.map((line, k) => {\n\n                    return    <div>\n                        <LiveContracts\n                        contractAvatar={row.url}\n                        />\n                        </div>\n\n                    })\n                   \n                \n                })\n         \n            \n           }\n              \n\n            <MarketBlurb \n            blurb=\"PredictItâ€™s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\"\n            blurbLink=\" here.\"\n            \n            />\n        \n        </div>\n       \n        </SlideToggle>\n\n       \n        \n\n   \n\n\n      \n      </div>\n      )}\n    \n      />\n      </div>\n  );\n }\n}\nexport default LiveMarkets;"]},"metadata":{},"sourceType":"module"}