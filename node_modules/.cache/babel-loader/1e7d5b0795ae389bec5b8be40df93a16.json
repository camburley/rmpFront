{"ast":null,"code":"var _jsxFileName = \"/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js\";\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts';\nimport MarketBlurb from '../MarketBlurb/MarketBlurb';\nimport EventObj from '../EventObj/EventObj';\nimport axios from 'axios';\n\nclass LiveMarkets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.contracts = [];\n    this.values = [];\n    this.markets = [];\n    this.json = [];\n    this.length = \"\";\n\n    this.logState = () => {\n      console.log('hello');\n      console.log('this.state.allContracts loggedState()', this.state.allContracts);\n      let loopAllContracts = this.state.allContracts;\n      loopAllContracts.map((row, k) => {\n        if (k !== 0 && k !== 1) {\n          console.log('k within LOOP logState()', k);\n          console.log('row within LOOP logState()', row);\n          this.state.marketContracts.push(row);\n        }\n      });\n    };\n\n    this.state = {\n      toggleSwitch: false,\n      marketIds: this.props.markets,\n      contractIds: [],\n      allContracts: [],\n      marketContracts: [],\n      contractsAndValues: [],\n      onlyValues: [],\n      jsonObj: [],\n      valuesLength: \"\",\n      objLength: [],\n      almostThere: [],\n      currentNames: [],\n      currentPrices: [],\n      loopThruTheseContracts: []\n    }; // END OF STATE\n  } // END OF CONSTRUCTOR\n\n\n  //Notes: \n  // Need to Get all Market Ids thru props\n  // Need to get all Contracts where Market Ids exist\n  // Need to get all Values where Contract Ids exist \n  // One JSON object to map Contracts and Values\n  // Loop thru JSON, render values in <LiveContracts /> component\n  getContractIds() {\n    console.log(\"getContractIds() was FIRED!\");\n    const contractRow = this.state.allContracts[this.props.marketIndex];\n\n    if (contractRow) {\n      const contractRows = contractRow.map((row, y) => {\n        console.log('y IN CONTRACT IDS', y);\n        console.log('row IN CONTRACT IDS', row.contract_id);\n        this.state.contractIds.push(row.contract_id);\n      }); // now we should have the contractIds\n\n      console.log('INSIDE getContractIds() / do we have contractIds? this.state.contractIds', this.state.contractIds);\n      console.log('INSIDE getContractIds() / contractRows', contractRows); // return this.fetchContractPrices();\n    }\n  }\n\n  componentDidMount() {\n    let marketIds = ['3633', '3653'];\n    console.log('this.state.marketIds', this.state.marketIds);\n    let themContracts = [];\n\n    for (var i = 0; i < marketIds.length; i++) {\n      const rmpURL = 'https://realmoneypolls.herokuapp.com/api/contract/contract_list/' + marketIds[i];\n      themContracts.push(axios.get(rmpURL));\n      this.state.allContracts.push(themContracts);\n      console.log('themContracts', themContracts);\n    }\n\n    Promise.all(themContracts).then(response => console.log('INSIDE componentDidMount() ðŸ’¬ promise response', response) + response.map((res, index) => {\n      this.state.allContracts.push(res.data[0]);\n      console.log('INSIDE componentDidMount() ðŸ‘‹ this.state.allContracts', this.state.allContracts); //this.getContractIds();\n    })).catch(err => console.log(err));\n  } //  Coming out of componentDidMount(), got this.state.allContracts\n\n\n  checkMarketContracts() {\n    console.log('this.state.marketContracts checkMarketContracts()', this.state.marketContracts);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"parent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.logState(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \" Log Current State \")), React.createElement(SlideToggle, {\n      duration: 300,\n      collapsed: true,\n      render: ({\n        toggle,\n        setCollapsibleElement\n      }) => React.createElement(\"div\", {\n        className: toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive',\n        onClick: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"LiveMarkets\",\n        onClick: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, this.props.contractName), React.createElement(SlideToggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"slide-toggle__box\",\n        ref: setCollapsibleElement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"No Contract Data Here\"), console.log('no contract data here'), React.createElement(MarketBlurb, {\n        blurb: \"PredictIt\\u2019s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\",\n        blurbLink: \" here.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LiveMarkets;","map":{"version":3,"sources":["/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js"],"names":["React","SlideToggle","LiveContracts","MarketBlurb","EventObj","axios","LiveMarkets","Component","constructor","props","contracts","values","markets","json","length","logState","console","log","state","allContracts","loopAllContracts","map","row","k","marketContracts","push","toggleSwitch","marketIds","contractIds","contractsAndValues","onlyValues","jsonObj","valuesLength","objLength","almostThere","currentNames","currentPrices","loopThruTheseContracts","getContractIds","contractRow","marketIndex","contractRows","y","contract_id","componentDidMount","themContracts","i","rmpURL","get","Promise","all","then","response","res","index","data","catch","err","checkMarketContracts","render","toggle","setCollapsibleElement","contractName"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAOA,MAAMC,WAAN,SAA0BN,KAAK,CAACO,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AADgB,SA6BlBC,SA7BkB,GA6BN,EA7BM;AAAA,SA8BlBC,MA9BkB,GA8BT,EA9BS;AAAA,SA+BlBC,OA/BkB,GA+BR,EA/BQ;AAAA,SAgClBC,IAhCkB,GAgCX,EAhCW;AAAA,SAiClBC,MAjCkB,GAiCT,EAjCS;;AAAA,SAkGpBC,QAlGoB,GAkGT,MAAM;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqD,KAAKC,KAAL,CAAWC,YAAhE;AAEA,UAAIC,gBAAgB,GAAG,KAAKF,KAAL,CAAWC,YAAlC;AAEAC,MAAAA,gBAAgB,CAACC,GAAjB,CAAqB,CAACC,GAAD,EAAMC,CAAN,KAAY;AAC7B,YAAIA,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAK,CAArB,EAAuB;AACnBP,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCM,CAAxC;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CK,GAA1C;AACA,eAAKJ,KAAL,CAAWM,eAAX,CAA2BC,IAA3B,CAAgCH,GAAhC;AAEH;AACJ,OAPD;AAQH,KAhHmB;;AAGhB,SAAKJ,KAAL,GAAW;AACPQ,MAAAA,YAAY,EAAG,KADR;AAEPC,MAAAA,SAAS,EAAG,KAAKlB,KAAL,CAAWG,OAFhB;AAGPgB,MAAAA,WAAW,EAAE,EAHN;AAIPT,MAAAA,YAAY,EAAE,EAJP;AAKPK,MAAAA,eAAe,EAAE,EALV;AAMPK,MAAAA,kBAAkB,EAAE,EANb;AAOPC,MAAAA,UAAU,EAAE,EAPL;AAQPC,MAAAA,OAAO,EAAE,EARF;AASPC,MAAAA,YAAY,EAAE,EATP;AAUPC,MAAAA,SAAS,EAAE,EAVJ;AAWPC,MAAAA,WAAW,EAAE,EAXN;AAYPC,MAAAA,YAAY,EAAE,EAZP;AAaPC,MAAAA,aAAa,EAAC,EAbP;AAcPC,MAAAA,sBAAsB,EAAE;AAdjB,KAAX,CAHgB,CAqBb;AAMJ,GA5BuC,CA4BtC;;;AASA;AACA;AACA;AACA;AACA;AACA;AAEEC,EAAAA,cAAc,GAAG;AACbtB,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACF,UAAMsB,WAAW,GAAG,KAAKrB,KAAL,CAAWC,YAAX,CAAwB,KAAKV,KAAL,CAAW+B,WAAnC,CAApB;;AACA,QAAID,WAAJ,EAAiB;AACjB,YAAME,YAAY,GAAGF,WAAW,CAAClB,GAAZ,CAAgB,CAACC,GAAD,EAAMoB,CAAN,KAAY;AAC7C1B,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCyB,CAAjC;AACA1B,QAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCK,GAAG,CAACqB,WAAvC;AACA,aAAKzB,KAAL,CAAWU,WAAX,CAAuBH,IAAvB,CAA4BH,GAAG,CAACqB,WAAhC;AACH,OAJoB,CAArB,CADiB,CAQjB;;AAEA3B,MAAAA,OAAO,CAACC,GAAR,CAAY,0EAAZ,EAAwF,KAAKC,KAAL,CAAWU,WAAnG;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDwB,YAAtD,EAXiB,CAcjB;AACH;AACA;;AAIHG,EAAAA,iBAAiB,GAAG;AAElB,QAAIjB,SAAS,GAAG,CAAC,MAAD,EAAS,MAAT,CAAhB;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,KAAKC,KAAL,CAAWS,SAA/C;AAEA,QAAIkB,aAAa,GAAG,EAApB;;AAEA,SAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGnB,SAAS,CAACb,MAA/B,EAAuCgC,CAAC,EAAxC,EAA2C;AACvC,YAAMC,MAAM,GAAG,qEAAqEpB,SAAS,CAACmB,CAAD,CAA7F;AACAD,MAAAA,aAAa,CAACpB,IAAd,CAAmBpB,KAAK,CAAC2C,GAAN,CAAUD,MAAV,CAAnB;AACA,WAAK7B,KAAL,CAAWC,YAAX,CAAwBM,IAAxB,CAA6BoB,aAA7B;AACA7B,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B4B,aAA7B;AACH;;AAEDI,IAAAA,OAAO,CAACC,GAAR,CAAYL,aAAZ,EAA2BM,IAA3B,CAAiCC,QAAD,IAChCpC,OAAO,CAACC,GAAR,CAAY,gDAAZ,EAA8DmC,QAA9D,IAEIA,QAAQ,CAAC/B,GAAT,CAAa,CAACgC,GAAD,EAAMC,KAAN,KAAgB;AACzB,WAAKpC,KAAL,CAAWC,YAAX,CAAwBM,IAAxB,CAA6B4B,GAAG,CAACE,IAAJ,CAAS,CAAT,CAA7B;AACAvC,MAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ,EAAqE,KAAKC,KAAL,CAAWC,YAAhF,EAFyB,CAGzB;AACH,KAJD,CAHJ,EAQOqC,KARP,CAQcC,GAAD,IAASzC,OAAO,CAACC,GAAR,CAAYwC,GAAZ,CARtB;AAUF,GA3FwC,CA+FzC;;;AAqBDC,EAAAA,oBAAoB,GAAE;AAClB1C,IAAAA,OAAO,CAACC,GAAR,CAAY,mDAAZ,EAAiE,KAAKC,KAAL,CAAWM,eAA5E;AACH;;AAQDmC,EAAAA,MAAM,GAAG;AAEP,WAGF;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACa;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAK5C,QAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADA,CADb,EAQI,oBAAC,WAAD;AACA,MAAA,QAAQ,EAAE,GADV;AAEA,MAAA,SAAS,MAFT;AAGA,MAAA,MAAM,EAAE,CAAC;AACP6C,QAAAA,MADO;AAEPC,QAAAA;AAFO,OAAD,KAKJ;AAAK,QAAA,SAAS,EAAGD,MAAM,GAAG,eAAH,GAAqB,qBAA5C;AAAmE,QAAA,OAAO,EAAEA,MAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA;AAAK,QAAA,SAAS,EAAC,aAAf;AAA6B,QAAA,OAAO,EAAEA,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,KAAKnD,KAAL,CAAWqD,YADZ,CAFA,EAOE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAmC,QAAA,GAAG,EAAED,qBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAJE,EAKD7C,OAAO,CAACC,GAAR,CAAY,uBAAZ,CALC,EAUF,oBAAC,WAAD;AACA,QAAA,KAAK,EAAC,wJADN;AAEA,QAAA,SAAS,EAAC,QAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVE,CADJ,CAPF,CARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,CAHE;AAwDA;;AAxLwC;;AA0L1C,eAAeX,WAAf","sourcesContent":["\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts'\nimport MarketBlurb from '../MarketBlurb/MarketBlurb'\nimport EventObj from '../EventObj/EventObj'\nimport axios from 'axios';\n\n\ntype Props = {\n    getContractIds: Function,\n  };\n\nclass LiveMarkets extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n        toggleSwitch : false,\n        marketIds : this.props.markets,\n        contractIds: [],\n        allContracts: [],\n        marketContracts: [],\n        contractsAndValues: [],\n        onlyValues: [],\n        jsonObj: [],\n        valuesLength: \"\",\n        objLength: [], \n        almostThere: [],\n        currentNames: [],\n        currentPrices:[],\n        loopThruTheseContracts: []\n\n\n\n    }; // END OF STATE\n\n\n\n\n\n  } // END OF CONSTRUCTOR\n\n  contracts = []\n  values = []\n  markets = []\n  json = []\n  length = \"\"\n\n\n    //Notes: \n    // Need to Get all Market Ids thru props\n    // Need to get all Contracts where Market Ids exist\n    // Need to get all Values where Contract Ids exist \n    // One JSON object to map Contracts and Values\n    // Loop thru JSON, render values in <LiveContracts /> component\n\n      getContractIds() {\n          console.log(\"getContractIds() was FIRED!\")\n        const contractRow = this.state.allContracts[this.props.marketIndex]\n        if (contractRow) {\n        const contractRows = contractRow.map((row, y) => {\n            console.log('y IN CONTRACT IDS', y)\n            console.log('row IN CONTRACT IDS', row.contract_id)\n            this.state.contractIds.push(row.contract_id)\n        })\n    \n    \n        // now we should have the contractIds\n    \n        console.log('INSIDE getContractIds() / do we have contractIds? this.state.contractIds', this.state.contractIds)\n        console.log('INSIDE getContractIds() / contractRows', contractRows)\n    \n        \n        // return this.fetchContractPrices();\n    }\n    }\n\n\n\n  componentDidMount() {\n  \n    let marketIds = ['3633', '3653']\n    console.log('this.state.marketIds', this.state.marketIds)\n\n    let themContracts = [];\n\n    for ( var i = 0; i < marketIds.length; i++){\n        const rmpURL = 'https://realmoneypolls.herokuapp.com/api/contract/contract_list/' + marketIds[i];\n        themContracts.push(axios.get(rmpURL));\n        this.state.allContracts.push(themContracts)\n        console.log('themContracts', themContracts)\n    }\n\n    Promise.all(themContracts).then((response) => \n    console.log('INSIDE componentDidMount() ðŸ’¬ promise response', response) +\n    \n        response.map((res, index) => {\n            this.state.allContracts.push(res.data[0])\n            console.log('INSIDE componentDidMount() ðŸ‘‹ this.state.allContracts', this.state.allContracts)\n            //this.getContractIds();\n        }\n        )).catch((err) => console.log(err));\n        \n }\n\n\n\n //  Coming out of componentDidMount(), got this.state.allContracts\n\n \n \nlogState = () => {\n    console.log('hello')\n    console.log('this.state.allContracts loggedState()', this.state.allContracts)\n\n    let loopAllContracts = this.state.allContracts\n\n    loopAllContracts.map((row, k) => {\n        if (k !== 0 && k !== 1){\n            console.log('k within LOOP logState()', k)\n            console.log('row within LOOP logState()', row)\n            this.state.marketContracts.push(row)\n\n        }\n    })\n}\n\n\ncheckMarketContracts(){\n    console.log('this.state.marketContracts checkMarketContracts()', this.state.marketContracts)\n}\n\n\n\n\n\n\n\nrender() {\n\n  return (\n          \n\n<div className=\"parent\">\n             <div className=\"one\" >\n             <button onClick={() => this.logState()}> Log Current State </button>\n             \n\n             \n             </div>\n\n    <SlideToggle\n    duration={300}\n    collapsed\n    render={({\n      toggle,\n      setCollapsibleElement\n    }) => (\n\n        <div className={ toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive'} onClick={toggle} > \n       \n        <div className=\"LiveMarkets\" onClick={toggle} >\n        {this.props.contractName} \n        \n    \n          </div>\n          <SlideToggle >\n              <div className=\"slide-toggle__box\" ref={setCollapsibleElement}  >\n              \n            \n\n            <div >No Contract Data Here</div>\n            {console.log('no contract data here')}\n    \n\n            \n\n            <MarketBlurb \n            blurb=\"PredictItâ€™s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\"\n            blurbLink=\" here.\"\n            \n            />\n        \n        </div>\n       \n        </SlideToggle>\n\n\n      </div>\n      )}\n    \n      />\n      </div>\n\n           \n  )\n }\n}\nexport default LiveMarkets;"]},"metadata":{},"sourceType":"module"}