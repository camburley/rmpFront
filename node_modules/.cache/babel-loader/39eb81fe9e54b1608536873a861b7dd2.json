{"ast":null,"code":"var _jsxFileName = \"/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js\";\n\n/* \n\n <LiveContracts \n        avatar={require('../../images/BidenAvatar.png')}\n        contractName=\"Joe Biden\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.14\"\n        priceChange=\"0.2\" \n        />\n         <LiveContracts \n        avatar={require('../../images/BernieAvatar.png')}\n        contractName=\"Bernie Sanders\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.06\"\n        priceChange=\"0.3\" \n        />\n         <LiveContracts \n        avatar={require('../../images/ButtigeigAvatar.png')}\n        contractName=\"Pete Buttigeig\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.05\"\n        priceChange=\"0.1\" \n        />\n         <LiveContracts \n        avatar={require('../../images/WarrenAvatar.png')}\n        contractName=\"Elizabeth Warren\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.03\"\n        priceChange=\"0.1\" \n        />\n\n\n\n\n*/\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts';\nimport MarketBlurb from '../MarketBlurb/MarketBlurb';\nimport axios from 'axios';\n\nclass LiveMarkets extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.contractDataCall = () => {\n      console.log('this.state.contractIds', this.state.contractIds);\n      const idsArray = this.state.contractIds;\n      const runIds = idsArray.forEach(function (array, index) {\n        axios.get('http://localhost:3002/api/value/value_list/' + array).then(res => {\n          // Put contract values into array in state\n          console.log('index', index);\n          console.log('res.data[0]', res.data[0]);\n          const values = res.data[0];\n          const lastTrade = values.last_trade_price;\n          const lastClose = values.last_close_price;\n          const priceDiff = (lastClose - lastTrade).toFixed(2); // save prices in state\n\n          const cPrice = lastTrade;\n          this.setState({\n            cPrice: cPrice\n          });\n          const pChange = priceDiff;\n          this.setState({\n            pChange: pChange\n          });\n          const newObj = {\n            \"price\": cPrice,\n            \"change\": pChange\n          };\n          this.state.price_and_Change.push(newObj);\n          this.runIds();\n          return console.log('this.state.contractPrices', this.state.contractPrices);\n        }); // end of prices call\n      });\n    };\n\n    this.toggleActive = () => {\n      this.setState({\n        active: !this.state.active\n      });\n    };\n\n    this.state = {\n      active: false,\n      contracts: [],\n      contractNames: [],\n      mId1: '2721',\n      contractIds: [],\n      contractPrices: [],\n      activeArray: [],\n      cPrice: \"\",\n      pChange: \"\",\n      cName: \"\",\n      cAvatar: \"\",\n      cData: [],\n      price_and_Change: []\n    };\n    this.contractDataCall = this.contractDataCall.bind(this);\n  }\n\n  async componentDidMount() {\n    //Get contracts\n    axios.get('http://localhost:3002/api/contract/contract_list/' + this.props.mId1Title).then(res => {\n      this.setState({\n        contracts: res.data[0]\n      });\n      const contracts = this.state.contracts;\n      contracts.map((contract, index) => {\n        this.state.contractIds.push(contract.contract_id);\n        this.state.contractNames.push(contract.name);\n        console.log('contract.contract_id', contract.contract_id);\n        console.log('this.state.contractIds', this.state.contractIds);\n      });\n      return console.log('this.state.contracts', this.state.contracts);\n    });\n    console.log('this.state.contracts', this.state.contracts);\n    console.log('this.state.contracts', this.state.contractIds);\n    /* \n    \n    \n    componentWillUpdate() {\n    \n        const names = this.state.contractNames\n        names.map((name, index) res => {\n        const contract = contract.name\n    \n        })\n    \n        const contracts = this.state.contracts\n        contracts.map((contract, index) res => {\n        const name = contract.name\n        const avatar = contract.image\n        \n        })\n    \n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    componentWillUpdate() {\n        const contractIds = this.state.contractIds \n        const contractNames = this.state.contractNames\n        console.log('contractIds', contractIds)\n        console.log('contractNames', contractNames)\n    \n    \n    \n        contractIds.map(( contractId, index) => {\n            axios.get('http://localhost:3002/api/value/value_list/' + contractId[index]).then(res =>{\n                                \n                                // Put contract values into array in state\n                                this.setState({ contractPrices: res.data[0]})\n                                // make some variables to easily move data around\n                                const values = this.state.contractPrices\n                                const lastTrade = values.last_trade_price\n                                const lastClose = values.last_close_price\n                                const priceDiff = (lastClose - lastTrade).toFixed(2)\n                                // save prices in state\n                                const cPrice = lastTrade;\n                                this.setState({ cPrice: cPrice})\n                                const pChange = priceDiff;\n                                this.setState({ pChange: pChange})\n                                console.log('this.state.cPrice', this.state.cPrice)\n                                console.log('this.state.pChange', this.state.pChange)\n                                console.log('this.state.contractPrices', this.state.contractPrices)\n                \n                            \n                \n                                \n                            })\n                            // end of prices call\n        })\n    \n        \n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    // Loop thru all the contracts\n            const contracts = this.state.contracts\n            contracts.map((contract, index) => {\n                this.state.contractIds.push(contract.contract_id)\n                // put name and avatar in state \n                this.setState({ cName: contract.name})\n                this.setState({ cAvatar: contract.image})\n                const contractIds = this.state.contractIds \n                // Need Contract Ids\n                // For each contract (data), Push the contract_id into contractIds array\n    \n               \n                   \n                \n                \n                \n                \n                   \n               \n    \n    \n                \n            \n              \n    \n                // Push both the current contract's name, avatar, into an array with the two values assoc w/ contract_id\n                   const dataObj = {'avatar': this.state.cAvatar, 'name': this.state.cName, 'price': this.state.cPrice, 'change': this.state.pChange}\n                   this.state.cData.push(dataObj)\n                   console.log('this.state.cData', this.state.cData);\n    \n                   this.setState({ cPrice: \"\"})\n                   this.setState({ pChange: \"\"})\n                   this.setState({ cName: \"\"})\n                   this.setState({ cAvatar: \"\"})\n    \n                   console.log('this.state.cPrice', this.state.cPrice)\n                   console.log('this.state.pChange', this.state.pChange)\n    \n                   console.log('this.state.cName', this.state.cName)\n                   console.log('this.state.cAvatar', this.state.cAvatar)\n                   console.log('this.state.contracts', this.state.contracts)\n    \n                })\n    \n    \n            \n        }); \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    axios.get('http://localhost:3002/api/value/value_list/' + contractIds[index]).then(res =>{\n                                \n                                // Put contract values into array in state\n                                this.setState({ contractPrices: res.data[0]})\n                                // make some variables to easily move data around\n                                const values = this.state.contractPrices\n                                const lastTrade = values.last_trade_price\n                                const lastClose = values.last_close_price\n                                const priceDiff = (lastClose - lastTrade).toFixed(2)\n                                // save prices in state\n                                const cPrice = lastTrade;\n                                this.setState({ cPrice: cPrice})\n                                const pChange = priceDiff;\n                                this.setState({ pChange: pChange})\n                                console.log('this.state.cPrice', this.state.cPrice)\n                                console.log('this.state.pChange', this.state.pChange)\n                                console.log('this.state.contractPrices', this.state.contractPrices)\n                \n                            \n                \n                                \n                            })\n                            // end of prices call\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    axios.get('http://localhost:3002/api/value/value_list/' + contractIds[index]).then(res =>{\n                    \n                    // Put contract values into array in state\n                    this.setState({ contractPrices: res.data[0]})\n                    // make some variables to easily move data around\n                    const values = this.state.contractPrices\n                    const lastTrade = values.last_trade_price\n                    const lastClose = values.last_close_price\n                    const priceDiff = (lastClose - lastTrade).toFixed(2)\n                    const priceSwap = (lastClose - lastTrade).toFixed(2)\n                    // save prices in state\n                    const cPrice = lastTrade;\n                    this.setState({ cPrice: cPrice})\n                    const pChange = priceDiff;\n                    this.setState({ pChange: pChange})\n                    console.log('this.state.cPrice', this.state.cPrice)\n                    console.log('this.state.pChange', this.state.pChange)\n                    console.log('this.state.contractPrices', this.state.contractPrices)\n    \n                \n    \n                    \n                })\n                // end of prices call\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n            console.log('response', res.data);\n            this.setState({ data: res.data[0] });\n            \n            // Loop thru all the contracts\n            const datas = this.state.data\n            datas.map((data, index) => {\n            \n    \n            //Get the values\n            const theValues = \n            // Get the Ids\n            // For each contract (data), Push the contract_id into contractIds array\n            this.state.contractIds.push(data.contract_id)\n    \n            console.log('contractIds', this.state.contractIds)\n            console.log('this.state.data', this.state.data);\n            \n            // Get the contract name and image\n            const cName = data.name;\n            const cAvatar = data.image;\n    \n            this.state.nameD.push(cName)\n            this.state.avatarD.push(cAvatar)\n    \n        \n          \n            console.log('cData Array', this.state.cData)\n           \n           \n            \n            \n            \n            const ids = this.state.contractIds\n            axios.get('http://localhost:3002/api/value/value_list/' + ids[index])\n            .then(res => {\n                this.setState({ contractPrices: res.data[0]})\n                \n                this.afunction()\n                console.log('this.state.activeArray', this.state.activeArray);\n                return console.log('contract prices', this.state.contractPrices) \n            });\n    \n            // end of Contracts Loop\n            })\n            //console.log('this.state.data', this.state.data)\n    \n    \n    */\n  }\n\n  async createContracts() {\n    const namesPrices = [{\n      contractPrice: this.state.price_and_Change.price,\n      priceChange: this.state.price_and_Change.change\n    }];\n    const contractArray = this.state.contracts;\n    contractArray.forEach(function (array, index) {\n      console.log('im inside the loop');\n      console.log('array.image', array.image);\n      console.log('array.name', array.name);\n      console.log('namesPrices', namesPrices);\n      console.log('array', array); //console.log('this the index', index)\n\n      return React.createElement(LiveContracts, {\n        key: index,\n        contractName: array.name,\n        contractAvatar: array.image,\n        contractPrice: \"0.00\",\n        contractChange: \"0.01\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554\n        },\n        __self: this\n      });\n    });\n  }\n\n  render() {\n    const activeContracts = [{\n      avatar: require(\"../../images/KamalaAvatar.png\"),\n      contractName: \"Kamala Harris\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.84\",\n      priceChange: \"0.02\"\n    }, {\n      avatar: require(\"../../images/BidenAvatar.png\"),\n      contractName: \"Joe Biden\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.01\",\n      priceChange: \"0.02\"\n    }, {\n      avatar: require(\"../../images/BernieAvatar.png\"),\n      contractName: \"Bernie Sanders\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.01\",\n      priceChange: \"0.02\"\n    }, {\n      avatar: require(\"../../images/ButtigeigAvatar.png\"),\n      contractName: \"Pete Buttigeig\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.01\",\n      priceChange: \"0.00\"\n    }, {\n      avatar: require(\"../../images/WarrenAvatar.png\"),\n      contractName: \"Elizabeth Warren\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.01\",\n      priceChange: \"0.02\"\n    }];\n    return React.createElement(\"div\", {\n      className: \"parent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626\n      },\n      __self: this\n    }), React.createElement(SlideToggle, {\n      duration: 300,\n      collapsed: true,\n      render: ({\n        toggle,\n        progress,\n        setCollapsibleElement,\n        range\n      }) => React.createElement(\"div\", {\n        className: toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive',\n        onClick: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 640\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"LiveMarkets\",\n        onClick: this.props.theToggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 642\n        },\n        __self: this\n      }, this.props.contractName), React.createElement(SlideToggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 646\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"slide-toggle__box\",\n        ref: setCollapsibleElement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 647\n        },\n        __self: this\n      }, this.contractDataCall(), React.createElement(MarketBlurb, {\n        blurb: \"PredictIt\\u2019s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\",\n        blurbLink: \" here.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 651\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LiveMarkets;","map":{"version":3,"sources":["/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js"],"names":["React","SlideToggle","LiveContracts","MarketBlurb","axios","LiveMarkets","Component","constructor","props","contractDataCall","console","log","state","contractIds","idsArray","runIds","forEach","array","index","get","then","res","data","values","lastTrade","last_trade_price","lastClose","last_close_price","priceDiff","toFixed","cPrice","setState","pChange","newObj","price_and_Change","push","contractPrices","toggleActive","active","contracts","contractNames","mId1","activeArray","cName","cAvatar","cData","bind","componentDidMount","mId1Title","map","contract","contract_id","name","createContracts","namesPrices","contractPrice","price","priceChange","change","contractArray","image","render","activeContracts","avatar","require","contractName","contractLabel","toggle","progress","setCollapsibleElement","range","theToggle"],"mappings":"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","sourcesContent":["/* \n\n <LiveContracts \n        avatar={require('../../images/BidenAvatar.png')}\n        contractName=\"Joe Biden\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.14\"\n        priceChange=\"0.2\" \n        />\n         <LiveContracts \n        avatar={require('../../images/BernieAvatar.png')}\n        contractName=\"Bernie Sanders\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.06\"\n        priceChange=\"0.3\" \n        />\n         <LiveContracts \n        avatar={require('../../images/ButtigeigAvatar.png')}\n        contractName=\"Pete Buttigeig\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.05\"\n        priceChange=\"0.1\" \n        />\n         <LiveContracts \n        avatar={require('../../images/WarrenAvatar.png')}\n        contractName=\"Elizabeth Warren\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.03\"\n        priceChange=\"0.1\" \n        />\n\n\n\n\n*/\n\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts'\nimport MarketBlurb from '../MarketBlurb/MarketBlurb'\nimport axios from 'axios';\n\n\nclass LiveMarkets extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n        active: false,\n        contracts: [],\n        contractNames: [],\n        mId1: '2721',\n        contractIds: [],\n        contractPrices: [],\n        activeArray: [],\n        cPrice: \"\",\n        pChange: \"\",\n        cName: \"\", \n        cAvatar: \"\", \n        cData: [],\n        price_and_Change: []\n\n\n    };\n\n    this.contractDataCall = this.contractDataCall.bind(this);\n\n  \n  }\n\n\n  async componentDidMount() {\n      //Get contracts\n   axios.get('http://localhost:3002/api/contract/contract_list/'+ this.props.mId1Title).then(res => { \n        this.setState({ contracts: res.data[0] });\n        const contracts = this.state.contracts\n        contracts.map((contract, index) => {\n           \n            \n             this.state.contractIds.push(contract.contract_id)\n             this.state.contractNames.push(contract.name)\n             console.log('contract.contract_id', contract.contract_id)\n             console.log('this.state.contractIds', this.state.contractIds);\n             \n             \n         \n            \n        }\n        )\n        return console.log('this.state.contracts', this.state.contracts);\n       \n}\n   );\n\n\n\n\n\n\n\n\n\nconsole.log('this.state.contracts', this.state.contracts)\nconsole.log('this.state.contracts', this.state.contractIds)\n\n\n\n\n  \n\n\n \n    \n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* \n\n\ncomponentWillUpdate() {\n\n    const names = this.state.contractNames\n    names.map((name, index) res => {\n    const contract = contract.name\n\n    })\n\n    const contracts = this.state.contracts\n    contracts.map((contract, index) res => {\n    const name = contract.name\n    const avatar = contract.image\n    \n    })\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncomponentWillUpdate() {\n    const contractIds = this.state.contractIds \n    const contractNames = this.state.contractNames\n    console.log('contractIds', contractIds)\n    console.log('contractNames', contractNames)\n\n\n\n    contractIds.map(( contractId, index) => {\n        axios.get('http://localhost:3002/api/value/value_list/' + contractId[index]).then(res =>{\n                            \n                            // Put contract values into array in state\n                            this.setState({ contractPrices: res.data[0]})\n                            // make some variables to easily move data around\n                            const values = this.state.contractPrices\n                            const lastTrade = values.last_trade_price\n                            const lastClose = values.last_close_price\n                            const priceDiff = (lastClose - lastTrade).toFixed(2)\n                            // save prices in state\n                            const cPrice = lastTrade;\n                            this.setState({ cPrice: cPrice})\n                            const pChange = priceDiff;\n                            this.setState({ pChange: pChange})\n                            console.log('this.state.cPrice', this.state.cPrice)\n                            console.log('this.state.pChange', this.state.pChange)\n                            console.log('this.state.contractPrices', this.state.contractPrices)\n            \n                        \n            \n                            \n                        })\n                        // end of prices call\n    })\n\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Loop thru all the contracts\n        const contracts = this.state.contracts\n        contracts.map((contract, index) => {\n            this.state.contractIds.push(contract.contract_id)\n            // put name and avatar in state \n            this.setState({ cName: contract.name})\n            this.setState({ cAvatar: contract.image})\n            const contractIds = this.state.contractIds \n            // Need Contract Ids\n            // For each contract (data), Push the contract_id into contractIds array\n\n           \n               \n            \n            \n            \n            \n               \n           \n\n\n            \n        \n          \n\n            // Push both the current contract's name, avatar, into an array with the two values assoc w/ contract_id\n               const dataObj = {'avatar': this.state.cAvatar, 'name': this.state.cName, 'price': this.state.cPrice, 'change': this.state.pChange}\n               this.state.cData.push(dataObj)\n               console.log('this.state.cData', this.state.cData);\n\n               this.setState({ cPrice: \"\"})\n               this.setState({ pChange: \"\"})\n               this.setState({ cName: \"\"})\n               this.setState({ cAvatar: \"\"})\n\n               console.log('this.state.cPrice', this.state.cPrice)\n               console.log('this.state.pChange', this.state.pChange)\n\n               console.log('this.state.cName', this.state.cName)\n               console.log('this.state.cAvatar', this.state.cAvatar)\n               console.log('this.state.contracts', this.state.contracts)\n\n            })\n\n\n        \n    }); \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\naxios.get('http://localhost:3002/api/value/value_list/' + contractIds[index]).then(res =>{\n                            \n                            // Put contract values into array in state\n                            this.setState({ contractPrices: res.data[0]})\n                            // make some variables to easily move data around\n                            const values = this.state.contractPrices\n                            const lastTrade = values.last_trade_price\n                            const lastClose = values.last_close_price\n                            const priceDiff = (lastClose - lastTrade).toFixed(2)\n                            // save prices in state\n                            const cPrice = lastTrade;\n                            this.setState({ cPrice: cPrice})\n                            const pChange = priceDiff;\n                            this.setState({ pChange: pChange})\n                            console.log('this.state.cPrice', this.state.cPrice)\n                            console.log('this.state.pChange', this.state.pChange)\n                            console.log('this.state.contractPrices', this.state.contractPrices)\n            \n                        \n            \n                            \n                        })\n                        // end of prices call\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\naxios.get('http://localhost:3002/api/value/value_list/' + contractIds[index]).then(res =>{\n                \n                // Put contract values into array in state\n                this.setState({ contractPrices: res.data[0]})\n                // make some variables to easily move data around\n                const values = this.state.contractPrices\n                const lastTrade = values.last_trade_price\n                const lastClose = values.last_close_price\n                const priceDiff = (lastClose - lastTrade).toFixed(2)\n                const priceSwap = (lastClose - lastTrade).toFixed(2)\n                // save prices in state\n                const cPrice = lastTrade;\n                this.setState({ cPrice: cPrice})\n                const pChange = priceDiff;\n                this.setState({ pChange: pChange})\n                console.log('this.state.cPrice', this.state.cPrice)\n                console.log('this.state.pChange', this.state.pChange)\n                console.log('this.state.contractPrices', this.state.contractPrices)\n\n            \n\n                \n            })\n            // end of prices call\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        console.log('response', res.data);\n        this.setState({ data: res.data[0] });\n        \n        // Loop thru all the contracts\n        const datas = this.state.data\n        datas.map((data, index) => {\n        \n\n        //Get the values\n        const theValues = \n        // Get the Ids\n        // For each contract (data), Push the contract_id into contractIds array\n        this.state.contractIds.push(data.contract_id)\n\n        console.log('contractIds', this.state.contractIds)\n        console.log('this.state.data', this.state.data);\n        \n        // Get the contract name and image\n        const cName = data.name;\n        const cAvatar = data.image;\n\n        this.state.nameD.push(cName)\n        this.state.avatarD.push(cAvatar)\n\n    \n      \n        console.log('cData Array', this.state.cData)\n       \n       \n        \n        \n        \n        const ids = this.state.contractIds\n        axios.get('http://localhost:3002/api/value/value_list/' + ids[index])\n        .then(res => {\n            this.setState({ contractPrices: res.data[0]})\n            \n            this.afunction()\n            console.log('this.state.activeArray', this.state.activeArray);\n            return console.log('contract prices', this.state.contractPrices) \n        });\n\n        // end of Contracts Loop\n        })\n        //console.log('this.state.data', this.state.data)\n\n\n*/\n\n}\n\ncontractDataCall = () => {\n\n  \n    console.log('this.state.contractIds', this.state.contractIds)\n    const idsArray = this.state.contractIds\n    const runIds = idsArray.forEach(function(array, index) {\n        axios.get('http://localhost:3002/api/value/value_list/' + array).then(res =>{\n    \n      // Put contract values into array in state\n      console.log('index', index)\n      console.log('res.data[0]', res.data[0])\n      const values = res.data[0]\n      const lastTrade = values.last_trade_price\n      const lastClose = values.last_close_price\n      const priceDiff = (lastClose - lastTrade).toFixed(2)\n      // save prices in state\n      const cPrice = lastTrade;\n      this.setState({ cPrice: cPrice})\n      const pChange = priceDiff;\n      this.setState({ pChange: pChange})\n      const newObj = {\"price\": cPrice, \"change\": pChange}\n      this.state.price_and_Change.push(newObj)\n      this.runIds()\n\n\n\n     return console.log('this.state.contractPrices', this.state.contractPrices);\n   \n  })\n  // end of prices call\n\n \n   \n   \n\n   \n\n \n\n}\n\n)}\n\n\n  \n\n  toggleActive = () => {\n\n      this.setState({ active: !this.state.active })\n  }\n\n\n  async createContracts(){\n\n    const namesPrices = [\n        {\n\n            contractPrice: this.state.price_and_Change.price,\n            priceChange: this.state.price_and_Change.change\n        }\n\n    ]\n\n    \n\n    const contractArray = this.state.contracts\n   contractArray.forEach(function(array, index) {\n    console.log('im inside the loop')\n    console.log('array.image', array.image)\n    console.log('array.name', array.name)\n\n    console.log('namesPrices', namesPrices)\n    console.log('array', array)\n   \n\n\n\n     //console.log('this the index', index)\n     return <LiveContracts\n     key={index} \n     contractName={array.name}\n     contractAvatar={array.image}\n     contractPrice=\"0.00\"\n     contractChange=\"0.01\"\n     \n     \n     \n    \n     />\n     \n    \n\n   }) \n  }\n\n\n\n \n\n\nrender() {\n\n    const activeContracts = [\n        {\n            avatar: require(\"../../images/KamalaAvatar.png\"),\n            contractName: \"Kamala Harris\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.84\",\n            priceChange: \"0.02\"\n        },\n        {\n            avatar: require(\"../../images/BidenAvatar.png\"),\n            contractName: \"Joe Biden\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.01\",\n            priceChange: \"0.02\"\n        },\n        {\n            avatar: require(\"../../images/BernieAvatar.png\"),\n            contractName: \"Bernie Sanders\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.01\",\n            priceChange: \"0.02\"\n        },\n        {\n            avatar: require(\"../../images/ButtigeigAvatar.png\"),\n            contractName: \"Pete Buttigeig\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.01\",\n            priceChange: \"0.00\"\n        },\n        {\n            avatar: require(\"../../images/WarrenAvatar.png\"),\n            contractName: \"Elizabeth Warren\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.01\",\n            priceChange: \"0.02\"\n        },\n\n    ]\n\n\n\n\n   \n\n\n\n  return (\n         <div className=\"parent\">\n             <div className=\"one\">\n                 \n             </div>\n\n    <SlideToggle\n    duration={300}\n    collapsed\n    render={({\n      toggle,\n      progress,\n      setCollapsibleElement,\n      range,\n    }) => (\n\n        <div className={ toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive'} onClick={toggle }>\n        \n        <div className=\"LiveMarkets\"  onClick={this.props.theToggle}>\n        {this.props.contractName}\n    \n          </div>\n          <SlideToggle>\n              <div className=\"slide-toggle__box\" ref={setCollapsibleElement}>\n              {this.contractDataCall()} \n             \n\n            <MarketBlurb \n            blurb=\"PredictIt’s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\"\n            blurbLink=\" here.\"\n            \n            />\n        \n        </div>\n       \n        </SlideToggle>\n\n       \n        \n\n   \n\n\n      \n      </div>\n      )}\n    \n      />\n      </div>\n  );\n }\n}\nexport default LiveMarkets;"]},"metadata":{},"sourceType":"module"}