{"ast":null,"code":"var _jsxFileName = \"/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js\";\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts';\nimport MarketBlurb from '../MarketBlurb/MarketBlurb';\nimport axios from 'axios';\nimport { objectTypeSpreadProperty, nullLiteral } from '@babel/types';\n\nclass LiveMarkets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.globalContracts = [];\n    this.globalContractIds = [];\n    this.globalNames = [];\n    this.globalArray = [];\n    this.bigObj = [];\n\n    this.contractDataCall = () => {\n      console.log('this.globalContractIds -- WITHIN contractDataCall(), BEFORE Prices Call ', this.globalContractIds); //console.log('this', this)\n\n      this.valuesLoop();\n    };\n\n    this.toggleActive = () => {\n      this.setState({\n        active: !this.state.active\n      });\n    };\n\n    this.state = {\n      active: false,\n      contracts: [],\n      contractNames: [],\n      mId1: '2721',\n      contractIds: [],\n      contractPrices: [],\n      activeArray: [],\n      cPrice: \"\",\n      pChange: \"\",\n      cName: \"\",\n      cAvatar: \"\",\n      cData: [],\n      price_and_Change: [],\n      arName: \"\",\n      arImage: \"\"\n    };\n    this.createContracts = this.createContracts.bind(this);\n    this.contractDetailCall = this.contractDataCall.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  valuesLoop() {\n    // check contractIds array -- see if they're all there\n    console.log('this.globalContractIds -- BEFORE valuesLoop() begins...', this.globalContractIds);\n    console.log('this.globalArray -- BEFORE valuesLoop() begins...', this.globalArray);\n    const idsArray = this.globalContractIds;\n    this.values = idsArray.forEach((array, index) => {\n      if (this.globalArray.length <= 1) {\n        console.log('array', array);\n        axios.get('http://localhost:3002/api/value/value_list/' + array).then(res => {\n          // Put contract values into array in state\n          // console.log('this', this)\n          console.log('res.data[0][0]', res.data[0][0]); //this.globalArray.push(res.data[0][0])\n\n          console.log('this.globalArray IN VALUES LOOP**', this.globalArray); // const valuesResponseArray = []\n          //valuesResponseArray.push(res.data[0][0]) \n\n          const valuesResponse = res.data[0][0]; //console.log('valuesResponse', valuesResponse);\n          //console.log('valuesResponse.last_trade_price', valuesResponse.last_trade_price);\n\n          const lastTrade = res.data[0][0].last_trade_price;\n          const lastClose = res.data[0][0].last_close_price;\n          const priceDiff = (lastClose - lastTrade).toFixed(2);\n          const priceGroupings = {\n            \"contractPrice\": res.data[0][0].best_buy_yes_offer,\n            \"contractChange\": (res.data[0][0].last_close_price - res.data[0][0].last_trade_price).toFixed(2)\n          };\n          this.globalArray.push(priceGroupings); //this.setState({ price_and_Change: valuesResponse })\n          //const newObj = {valuesResponse}\n          //this.setState({ price_and_Change: newObj})\n          //this.state.price_and_Change.push(newObj)\n          //console.log('this.state.price_and_Change', this.state.price_and_Change)\n          //console.log('this.state.price_and_Change.valuesResponse', this.state.price_and_Change.valuesResponse)\n          //console.log('this.state.price_and_Change.valuesResponse.last_trade_price', this.state.price_and_Change.valuesResponse.last_trade_price)\n          //this.setState({ price_and_Change: res.data[0]});\n\n          this.createContracts();\n          return;\n        }); // end of prices call\n      } // if statement\n\n    });\n  }\n\n  async componentDidMount() {\n    //Get contracts\n    axios.get('http://localhost:3002/api/contract/contract_list/' + this.props.mId1Title).then(res => {\n      // this.setState({ contracts: res.data[0] });\n      console.log('res.data[0] NO IDs in Global Contracts', res.data[0]);\n      this.globalContracts.push(res.data[0]);\n      const contracts = this.globalContracts;\n      console.log('contracts[0] how many b4 i run this loop?', contracts[0]);\n      contracts[0].map((contract, index) => {\n        console.log('this.globalContracts BEFORE ADDING TO ARRAY', this.globalContracts);\n        console.log('this.globalContractIds BEFORE ADDING TO ARRAY', this.globalContractIds);\n        this.globalContractIds.push(contract.contract_id);\n        console.log('contract[0].contract_id see IDs after pushed', contract.contract_id);\n        const namesUrls = {\n          \"name\": contract.name,\n          \"url\": contract.image\n        };\n        this.globalNames.push(namesUrls);\n        console.log('this.globalContractIds **AFTER** ADDING TO ARRAY', this.globalContractIds);\n        console.log('this.globalNames **AFTER** ADDING TO ARRAY', this.globalNames);\n        console.log('this.globalContractIds', this.globalContractIds);\n        console.log('this.globalContracts BEFORE ADDING TO ARRAY', this.globalContracts);\n      });\n      this.setState({\n        contractIds: this.globalContractIds\n      });\n      console.log('this.globalContractIds AFTER pushing into State', this.globalContractIds);\n      console.log('this.state.contractIds AFTER pushing into State', this.state.contractIds);\n      return;\n    });\n    /* \n    \n    \n    componentWillUpdate() {\n    \n        const names = this.state.contractNames\n        names.map((name, index) res => {\n        const contract = contract.name\n    \n        })\n    \n        const contracts = this.state.contracts\n        contracts.map((contract, index) res => {\n        const name = contract.name\n        const avatar = contract.image\n        \n        })\n    \n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    componentWillUpdate() {\n        const contractIds = this.state.contractIds \n        const contractNames = this.state.contractNames\n        console.log('contractIds', contractIds)\n        console.log('contractNames', contractNames)\n    \n    \n    \n        contractIds.map(( contractId, index) => {\n            axios.get('http://localhost:3002/api/value/value_list/' + contractId[index]).then(res =>{\n                                \n                                // Put contract values into array in state\n                                this.setState({ contractPrices: res.data[0]})\n                                // make some variables to easily move data around\n                                const values = this.state.contractPrices\n                                const lastTrade = values.last_trade_price\n                                const lastClose = values.last_close_price\n                                const priceDiff = (lastClose - lastTrade).toFixed(2)\n                                // save prices in state\n                                const cPrice = lastTrade;\n                                this.setState({ cPrice: cPrice})\n                                const pChange = priceDiff;\n                                this.setState({ pChange: pChange})\n                                console.log('this.state.cPrice', this.state.cPrice)\n                                console.log('this.state.pChange', this.state.pChange)\n                                console.log('this.state.contractPrices', this.state.contractPrices)\n                \n                            \n                \n                                \n                            })\n                            // end of prices call\n        })\n    \n        \n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    // Loop thru all the contracts\n            const contracts = this.state.contracts\n            contracts.map((contract, index) => {\n                this.state.contractIds.push(contract.contract_id)\n                // put name and avatar in state \n                this.setState({ cName: contract.name})\n                this.setState({ cAvatar: contract.image})\n                const contractIds = this.state.contractIds \n                // Need Contract Ids\n                // For each contract (data), Push the contract_id into contractIds array\n    \n               \n                   \n                \n                \n                \n                \n                   \n               \n    \n    \n                \n            \n              \n    \n                // Push both the current contract's name, avatar, into an array with the two values assoc w/ contract_id\n                   const dataObj = {'avatar': this.state.cAvatar, 'name': this.state.cName, 'price': this.state.cPrice, 'change': this.state.pChange}\n                   this.state.cData.push(dataObj)\n                   console.log('this.state.cData', this.state.cData);\n    \n                   this.setState({ cPrice: \"\"})\n                   this.setState({ pChange: \"\"})\n                   this.setState({ cName: \"\"})\n                   this.setState({ cAvatar: \"\"})\n    \n                   console.log('this.state.cPrice', this.state.cPrice)\n                   console.log('this.state.pChange', this.state.pChange)\n    \n                   console.log('this.state.cName', this.state.cName)\n                   console.log('this.state.cAvatar', this.state.cAvatar)\n                   console.log('this.state.contracts', this.state.contracts)\n    \n                })\n    \n    \n            \n        }); \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    axios.get('http://localhost:3002/api/value/value_list/' + contractIds[index]).then(res =>{\n                                \n                                // Put contract values into array in state\n                                this.setState({ contractPrices: res.data[0]})\n                                // make some variables to easily move data around\n                                const values = this.state.contractPrices\n                                const lastTrade = values.last_trade_price\n                                const lastClose = values.last_close_price\n                                const priceDiff = (lastClose - lastTrade).toFixed(2)\n                                // save prices in state\n                                const cPrice = lastTrade;\n                                this.setState({ cPrice: cPrice})\n                                const pChange = priceDiff;\n                                this.setState({ pChange: pChange})\n                                console.log('this.state.cPrice', this.state.cPrice)\n                                console.log('this.state.pChange', this.state.pChange)\n                                console.log('this.state.contractPrices', this.state.contractPrices)\n                \n                            \n                \n                                \n                            })\n                            // end of prices call\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    axios.get('http://localhost:3002/api/value/value_list/' + contractIds[index]).then(res =>{\n                    \n                    // Put contract values into array in state\n                    this.setState({ contractPrices: res.data[0]})\n                    // make some variables to easily move data around\n                    const values = this.state.contractPrices\n                    const lastTrade = values.last_trade_price\n                    const lastClose = values.last_close_price\n                    const priceDiff = (lastClose - lastTrade).toFixed(2)\n                    const priceSwap = (lastClose - lastTrade).toFixed(2)\n                    // save prices in state\n                    const cPrice = lastTrade;\n                    this.setState({ cPrice: cPrice})\n                    const pChange = priceDiff;\n                    this.setState({ pChange: pChange})\n                    console.log('this.state.cPrice', this.state.cPrice)\n                    console.log('this.state.pChange', this.state.pChange)\n                    console.log('this.state.contractPrices', this.state.contractPrices)\n    \n                \n    \n                    \n                })\n                // end of prices call\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n            console.log('response', res.data);\n            this.setState({ data: res.data[0] });\n            \n            // Loop thru all the contracts\n            const datas = this.state.data\n            datas.map((data, index) => {\n            \n    \n            //Get the values\n            const theValues = \n            // Get the Ids\n            // For each contract (data), Push the contract_id into contractIds array\n            this.state.contractIds.push(data.contract_id)\n    \n            console.log('contractIds', this.state.contractIds)\n            console.log('this.state.data', this.state.data);\n            \n            // Get the contract name and image\n            const cName = data.name;\n            const cAvatar = data.image;\n    \n            this.state.nameD.push(cName)\n            this.state.avatarD.push(cAvatar)\n    \n        \n          \n            console.log('cData Array', this.state.cData)\n           \n           \n            \n            \n            \n            const ids = this.state.contractIds\n            axios.get('http://localhost:3002/api/value/value_list/' + ids[index])\n            .then(res => {\n                this.setState({ contractPrices: res.data[0]})\n                \n                this.afunction()\n                console.log('this.state.activeArray', this.state.activeArray);\n                return console.log('contract prices', this.state.contractPrices) \n            });\n    \n            // end of Contracts Loop\n            })\n            //console.log('this.state.data', this.state.data)\n    \n    \n    */\n  }\n\n  createContracts() {\n    setTimeout(5200);\n    console.log('this.globalArray prices -- WITHIN createContracts()', this.globalArray);\n    console.log('this.globalContracts --  WITHIN createContracts()', this.globalContracts);\n    console.log('this.globalNames --  WITHIN createContracts()', this.globalNames); //console.log('this.state.price_and_Change.valuesResponse.best_buy_price', self.state.price_and_Change.valuesResponse.best_buy_price)\n    //const globalNames_Urls = this.globalNames\n    //const createJointObj = this.globalArray\n    //const vR = this.state.price_and_Change\n    //const fullArray = [];\n\n    if (this.globalNames.length === this.globalArray.length) {\n      this.globalNames.map((row, index) => {\n        this.globalArray.map((line, k) => {\n          if (k === index) {\n            const jointObj = {\n              \"name\": row.name,\n              \"url\": row.url,\n              \"contractPrice\": line.contractPrice,\n              \"contractChange\": line.contractChange\n            };\n            this.bigObj.push(jointObj);\n            console.log('this.bogObj', this.bigObj);\n          } else {}\n        });\n      });\n    } else {\n      return;\n    }\n    /*\n    for (let i = 0; i < this.globalNames.length; i++){\n        for ( let k = i; k === i;){\n            const jointObj = {\"name\": i.name, \"url\": i.url, \"contractPrice\": k.contractPrice, \"contractChange\": k.contractChange}\n            this.bigObj.push(jointObj);\n            console.log('this.bogObj', this.bigObj);\n         }\n    }\n    */\n\n  }\n\n  render() {\n    const namesPrices = [{\n      contractPrice: this.globalArray.contractPrice,\n      priceChange: this.globalArray.contractChange\n    }];\n    const activeContracts = [{\n      avatar: require(\"../../images/KamalaAvatar.png\"),\n      contractName: \"Kamala Harris\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.84\",\n      priceChange: \"0.02\"\n    }, {\n      avatar: require(\"../../images/BidenAvatar.png\"),\n      contractName: \"Joe Biden\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.01\",\n      priceChange: \"0.02\"\n    }, {\n      avatar: require(\"../../images/BernieAvatar.png\"),\n      contractName: \"Bernie Sanders\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.01\",\n      priceChange: \"0.02\"\n    }, {\n      avatar: require(\"../../images/ButtigeigAvatar.png\"),\n      contractName: \"Pete Buttigeig\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.01\",\n      priceChange: \"0.00\"\n    }, {\n      avatar: require(\"../../images/WarrenAvatar.png\"),\n      contractName: \"Elizabeth Warren\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.01\",\n      priceChange: \"0.02\"\n    }];\n    return React.createElement(\"div\", {\n      className: \"parent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681\n      },\n      __self: this\n    }), React.createElement(SlideToggle, {\n      duration: 300,\n      collapsed: true,\n      render: ({\n        toggle,\n        progress,\n        setCollapsibleElement,\n        range\n      }) => React.createElement(\"div\", {\n        className: toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive',\n        onClick: toggle,\n        onChange: this.valuesLoop(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"LiveMarkets\",\n        onClick: this.props.theToggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697\n        },\n        __self: this\n      }, this.props.contractName), React.createElement(SlideToggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 701\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"slide-toggle__box\",\n        ref: setCollapsibleElement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 702\n        },\n        __self: this\n      }, this.bigObj.map((obj, index) => {\n        const name = obj.name;\n        const url = obj.url;\n        const price = obj.contractPrice;\n        const change = obj.contractChange;\n        return React.createElement(LiveContracts, {\n          key: index,\n          contractName: name,\n          contractAvatar: url,\n          contractPrice: price,\n          contractChange: change,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 716\n          },\n          __self: this\n        });\n      }), React.createElement(MarketBlurb, {\n        blurb: \"PredictIt\\u2019s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\",\n        blurbLink: \" here.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 736\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LiveMarkets;","map":{"version":3,"sources":["/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js"],"names":["React","SlideToggle","LiveContracts","MarketBlurb","axios","objectTypeSpreadProperty","nullLiteral","LiveMarkets","Component","constructor","props","globalContracts","globalContractIds","globalNames","globalArray","bigObj","contractDataCall","console","log","valuesLoop","toggleActive","setState","active","state","contracts","contractNames","mId1","contractIds","contractPrices","activeArray","cPrice","pChange","cName","cAvatar","cData","price_and_Change","arName","arImage","createContracts","bind","contractDetailCall","componentDidMount","idsArray","values","forEach","array","index","length","get","then","res","data","valuesResponse","lastTrade","last_trade_price","lastClose","last_close_price","priceDiff","toFixed","priceGroupings","best_buy_yes_offer","push","mId1Title","map","contract","contract_id","namesUrls","name","image","setTimeout","row","line","k","jointObj","url","contractPrice","contractChange","render","namesPrices","priceChange","activeContracts","avatar","require","contractName","contractLabel","toggle","progress","setCollapsibleElement","range","theToggle","obj","price","change"],"mappings":"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","sourcesContent":["\n\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts'\nimport MarketBlurb from '../MarketBlurb/MarketBlurb'\nimport axios from 'axios';\nimport { objectTypeSpreadProperty, nullLiteral } from '@babel/types';\n\n\nclass LiveMarkets extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n        active: false,\n        contracts: [],\n        contractNames: [],\n        mId1: '2721',\n        contractIds: [],\n        contractPrices: [],\n        activeArray: [],\n        cPrice: \"\",\n        pChange: \"\",\n        cName: \"\", \n        cAvatar: \"\", \n        cData: [],\n        price_and_Change: [],\n        arName: \"\", \n        arImage: \"\",\n\n\n    };\n\n    this.createContracts = this.createContracts.bind(this);\n    this.contractDetailCall = this.contractDataCall.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n\n  \n  }\n\n  globalContracts = [];\n  globalContractIds = [];\n  globalNames = [];\n  globalArray = [];\n  bigObj= [];\n\n\n  valuesLoop(){\n    // check contractIds array -- see if they're all there\n    console.log('this.globalContractIds -- BEFORE valuesLoop() begins...', this.globalContractIds);\n    console.log('this.globalArray -- BEFORE valuesLoop() begins...', this.globalArray);\n    const idsArray = this.globalContractIds\n    this.values = idsArray.forEach((array, index) => {\n        if (this.globalArray.length <= 1 ){\n\n        console.log('array', array)\n       \n        axios.get('http://localhost:3002/api/value/value_list/' + array).then(res =>{\n    \n        // Put contract values into array in state\n       // console.log('this', this)\n        console.log('res.data[0][0]', res.data[0][0]);\n        //this.globalArray.push(res.data[0][0])\n        console.log('this.globalArray IN VALUES LOOP**', this.globalArray)\n        // const valuesResponseArray = []\n        //valuesResponseArray.push(res.data[0][0]) \n        const valuesResponse = res.data[0][0];\n\n        //console.log('valuesResponse', valuesResponse);\n        //console.log('valuesResponse.last_trade_price', valuesResponse.last_trade_price);\n        const lastTrade = res.data[0][0].last_trade_price\n        const lastClose = res.data[0][0].last_close_price\n        const priceDiff = (lastClose - lastTrade).toFixed(2)\n\n        const priceGroupings = {\"contractPrice\": res.data[0][0].best_buy_yes_offer, \"contractChange\": (res.data[0][0].last_close_price - res.data[0][0].last_trade_price).toFixed(2)}\n        this.globalArray.push(priceGroupings)\n\n\n        //this.setState({ price_and_Change: valuesResponse })\n        //const newObj = {valuesResponse}\n        //this.setState({ price_and_Change: newObj})\n        //this.state.price_and_Change.push(newObj)\n\n        //console.log('this.state.price_and_Change', this.state.price_and_Change)\n        //console.log('this.state.price_and_Change.valuesResponse', this.state.price_and_Change.valuesResponse)\n        //console.log('this.state.price_and_Change.valuesResponse.last_trade_price', this.state.price_and_Change.valuesResponse.last_trade_price)\n        \n        //this.setState({ price_and_Change: res.data[0]});\n        \n        this.createContracts()\n     \n      \n    \n\n      \n\n     return;\n     \n   \n  }) \n  // end of prices call\n\n \n   \n   \n\n \n\n \n\n} // if statement\n\n}\n\n)\n}\n\n  \n\n  async componentDidMount() {\n\n\n      //Get contracts\n   axios.get('http://localhost:3002/api/contract/contract_list/'+ this.props.mId1Title).then(res => { \n        // this.setState({ contracts: res.data[0] });\n        console.log('res.data[0] NO IDs in Global Contracts', res.data[0])\n        this.globalContracts.push(res.data[0])\n        const contracts = this.globalContracts\n        console.log('contracts[0] how many b4 i run this loop?', contracts[0])\n\n        contracts[0].map((contract, index) => {\n            \n            console.log('this.globalContracts BEFORE ADDING TO ARRAY', this.globalContracts)\n            console.log('this.globalContractIds BEFORE ADDING TO ARRAY', this.globalContractIds)\n             this.globalContractIds.push(contract.contract_id)\n             console.log('contract[0].contract_id see IDs after pushed', contract.contract_id)\n             const namesUrls = {\"name\": contract.name, \"url\": contract.image }\n             this.globalNames.push(namesUrls)\n             console.log('this.globalContractIds **AFTER** ADDING TO ARRAY', this.globalContractIds)\n             console.log('this.globalNames **AFTER** ADDING TO ARRAY', this.globalNames)\n             console.log('this.globalContractIds', this.globalContractIds);\n             console.log('this.globalContracts BEFORE ADDING TO ARRAY', this.globalContracts)\n           \n             \n         \n            \n        }\n        )\n        this.setState({ contractIds : this.globalContractIds})\n        console.log('this.globalContractIds AFTER pushing into State', this.globalContractIds)\n        console.log('this.state.contractIds AFTER pushing into State', this.state.contractIds)\n        return ;\n\n        \n       \n}\n\n\n\n   );\n\n   \n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n \n    \n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* \n\n\ncomponentWillUpdate() {\n\n    const names = this.state.contractNames\n    names.map((name, index) res => {\n    const contract = contract.name\n\n    })\n\n    const contracts = this.state.contracts\n    contracts.map((contract, index) res => {\n    const name = contract.name\n    const avatar = contract.image\n    \n    })\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncomponentWillUpdate() {\n    const contractIds = this.state.contractIds \n    const contractNames = this.state.contractNames\n    console.log('contractIds', contractIds)\n    console.log('contractNames', contractNames)\n\n\n\n    contractIds.map(( contractId, index) => {\n        axios.get('http://localhost:3002/api/value/value_list/' + contractId[index]).then(res =>{\n                            \n                            // Put contract values into array in state\n                            this.setState({ contractPrices: res.data[0]})\n                            // make some variables to easily move data around\n                            const values = this.state.contractPrices\n                            const lastTrade = values.last_trade_price\n                            const lastClose = values.last_close_price\n                            const priceDiff = (lastClose - lastTrade).toFixed(2)\n                            // save prices in state\n                            const cPrice = lastTrade;\n                            this.setState({ cPrice: cPrice})\n                            const pChange = priceDiff;\n                            this.setState({ pChange: pChange})\n                            console.log('this.state.cPrice', this.state.cPrice)\n                            console.log('this.state.pChange', this.state.pChange)\n                            console.log('this.state.contractPrices', this.state.contractPrices)\n            \n                        \n            \n                            \n                        })\n                        // end of prices call\n    })\n\n    \n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Loop thru all the contracts\n        const contracts = this.state.contracts\n        contracts.map((contract, index) => {\n            this.state.contractIds.push(contract.contract_id)\n            // put name and avatar in state \n            this.setState({ cName: contract.name})\n            this.setState({ cAvatar: contract.image})\n            const contractIds = this.state.contractIds \n            // Need Contract Ids\n            // For each contract (data), Push the contract_id into contractIds array\n\n           \n               \n            \n            \n            \n            \n               \n           \n\n\n            \n        \n          \n\n            // Push both the current contract's name, avatar, into an array with the two values assoc w/ contract_id\n               const dataObj = {'avatar': this.state.cAvatar, 'name': this.state.cName, 'price': this.state.cPrice, 'change': this.state.pChange}\n               this.state.cData.push(dataObj)\n               console.log('this.state.cData', this.state.cData);\n\n               this.setState({ cPrice: \"\"})\n               this.setState({ pChange: \"\"})\n               this.setState({ cName: \"\"})\n               this.setState({ cAvatar: \"\"})\n\n               console.log('this.state.cPrice', this.state.cPrice)\n               console.log('this.state.pChange', this.state.pChange)\n\n               console.log('this.state.cName', this.state.cName)\n               console.log('this.state.cAvatar', this.state.cAvatar)\n               console.log('this.state.contracts', this.state.contracts)\n\n            })\n\n\n        \n    }); \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\naxios.get('http://localhost:3002/api/value/value_list/' + contractIds[index]).then(res =>{\n                            \n                            // Put contract values into array in state\n                            this.setState({ contractPrices: res.data[0]})\n                            // make some variables to easily move data around\n                            const values = this.state.contractPrices\n                            const lastTrade = values.last_trade_price\n                            const lastClose = values.last_close_price\n                            const priceDiff = (lastClose - lastTrade).toFixed(2)\n                            // save prices in state\n                            const cPrice = lastTrade;\n                            this.setState({ cPrice: cPrice})\n                            const pChange = priceDiff;\n                            this.setState({ pChange: pChange})\n                            console.log('this.state.cPrice', this.state.cPrice)\n                            console.log('this.state.pChange', this.state.pChange)\n                            console.log('this.state.contractPrices', this.state.contractPrices)\n            \n                        \n            \n                            \n                        })\n                        // end of prices call\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\naxios.get('http://localhost:3002/api/value/value_list/' + contractIds[index]).then(res =>{\n                \n                // Put contract values into array in state\n                this.setState({ contractPrices: res.data[0]})\n                // make some variables to easily move data around\n                const values = this.state.contractPrices\n                const lastTrade = values.last_trade_price\n                const lastClose = values.last_close_price\n                const priceDiff = (lastClose - lastTrade).toFixed(2)\n                const priceSwap = (lastClose - lastTrade).toFixed(2)\n                // save prices in state\n                const cPrice = lastTrade;\n                this.setState({ cPrice: cPrice})\n                const pChange = priceDiff;\n                this.setState({ pChange: pChange})\n                console.log('this.state.cPrice', this.state.cPrice)\n                console.log('this.state.pChange', this.state.pChange)\n                console.log('this.state.contractPrices', this.state.contractPrices)\n\n            \n\n                \n            })\n            // end of prices call\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        console.log('response', res.data);\n        this.setState({ data: res.data[0] });\n        \n        // Loop thru all the contracts\n        const datas = this.state.data\n        datas.map((data, index) => {\n        \n\n        //Get the values\n        const theValues = \n        // Get the Ids\n        // For each contract (data), Push the contract_id into contractIds array\n        this.state.contractIds.push(data.contract_id)\n\n        console.log('contractIds', this.state.contractIds)\n        console.log('this.state.data', this.state.data);\n        \n        // Get the contract name and image\n        const cName = data.name;\n        const cAvatar = data.image;\n\n        this.state.nameD.push(cName)\n        this.state.avatarD.push(cAvatar)\n\n    \n      \n        console.log('cData Array', this.state.cData)\n       \n       \n        \n        \n        \n        const ids = this.state.contractIds\n        axios.get('http://localhost:3002/api/value/value_list/' + ids[index])\n        .then(res => {\n            this.setState({ contractPrices: res.data[0]})\n            \n            this.afunction()\n            console.log('this.state.activeArray', this.state.activeArray);\n            return console.log('contract prices', this.state.contractPrices) \n        });\n\n        // end of Contracts Loop\n        })\n        //console.log('this.state.data', this.state.data)\n\n\n*/\n\n\n\n\n\n\n\n\n}\n\n\n \n\n\ncontractDataCall = () => {\n\n  \n    console.log('this.globalContractIds -- WITHIN contractDataCall(), BEFORE Prices Call ', this.globalContractIds)\n    //console.log('this', this)\n    this.valuesLoop();\n    }\n\n\n  \n\n  toggleActive = () => {\n\n      this.setState({ active: !this.state.active })\n  }\n\n\n  createContracts(){\n  \n    setTimeout(5200);\n\n\n    console.log('this.globalArray prices -- WITHIN createContracts()', this.globalArray)\n    console.log('this.globalContracts --  WITHIN createContracts()', this.globalContracts)\n    console.log('this.globalNames --  WITHIN createContracts()', this.globalNames)\n\n\n    //console.log('this.state.price_and_Change.valuesResponse.best_buy_price', self.state.price_and_Change.valuesResponse.best_buy_price)\n\n    \n    \n    //const globalNames_Urls = this.globalNames\n    //const createJointObj = this.globalArray\n    \n    //const vR = this.state.price_and_Change\n    //const fullArray = [];\n    if (this.globalNames.length === this.globalArray.length){this.globalNames.map((row, index)=>{\n        this.globalArray.map((line, k) => {\n            if(k === index){\n                const jointObj = {\"name\": row.name, \"url\": row.url, \"contractPrice\": line.contractPrice, \"contractChange\": line.contractChange}\n                this.bigObj.push(jointObj);\n                console.log('this.bogObj', this.bigObj);\n            } else {\n                \n            }\n        })\n    })} else {\n        return;\n    }\n\n    /*\n    for (let i = 0; i < this.globalNames.length; i++){\n        for ( let k = i; k === i;){\n            const jointObj = {\"name\": i.name, \"url\": i.url, \"contractPrice\": k.contractPrice, \"contractChange\": k.contractChange}\n            this.bigObj.push(jointObj);\n            console.log('this.bogObj', this.bigObj);\n\n        }\n    }\n    */\n \n  }\n\n\n\n \n\n\nrender() {\n\n    const namesPrices = [\n        {\n\n            contractPrice: this.globalArray.contractPrice, \n            priceChange: this.globalArray.contractChange\n        }\n\n    ]\n\n    const activeContracts = [\n        {\n            avatar: require(\"../../images/KamalaAvatar.png\"),\n            contractName: \"Kamala Harris\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.84\",\n            priceChange: \"0.02\"\n        },\n        {\n            avatar: require(\"../../images/BidenAvatar.png\"),\n            contractName: \"Joe Biden\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.01\",\n            priceChange: \"0.02\"\n        },\n        {\n            avatar: require(\"../../images/BernieAvatar.png\"),\n            contractName: \"Bernie Sanders\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.01\",\n            priceChange: \"0.02\"\n        },\n        {\n            avatar: require(\"../../images/ButtigeigAvatar.png\"),\n            contractName: \"Pete Buttigeig\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.01\",\n            priceChange: \"0.00\"\n        },\n        {\n            avatar: require(\"../../images/WarrenAvatar.png\"),\n            contractName: \"Elizabeth Warren\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.01\",\n            priceChange: \"0.02\"\n        },\n\n    ]\n\n\n\n\n   \n\n\n\n  return (\n         <div className=\"parent\">\n             <div className=\"one\">\n                 \n             </div>\n\n    <SlideToggle\n    duration={300}\n    collapsed\n    render={({\n      toggle,\n      progress,\n      setCollapsibleElement,\n      range,\n    }) => (\n\n        <div className={ toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive'} onClick={toggle} onChange={this.valuesLoop()} >\n        \n        <div className=\"LiveMarkets\"  onClick={this.props.theToggle} >\n        {this.props.contractName}\n    \n          </div>\n          <SlideToggle >\n              <div className=\"slide-toggle__box\" ref={setCollapsibleElement}>\n                  \n               \n               {\n               \n                \n\n               this.bigObj.map((obj, index) => {\n                const name = obj.name;\n                const url = obj.url;\n                const price = obj.contractPrice;\n                const change = obj.contractChange;\n                return (\n                     \n                            <LiveContracts\n                            key={index}\n                            contractName={name}\n                            contractAvatar={url}\n                            contractPrice={price}\n                            contractChange={change}\n                            \n                            \n                            \n                            \n                            />\n                )\n\n\n               })\n               }\n\n              \n             \n\n            <MarketBlurb \n            blurb=\"PredictIt’s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\"\n            blurbLink=\" here.\"\n            \n            />\n        \n        </div>\n       \n        </SlideToggle>\n\n       \n        \n\n   \n\n\n      \n      </div>\n      )}\n    \n      />\n      </div>\n  );\n }\n}\nexport default LiveMarkets;"]},"metadata":{},"sourceType":"module"}