{"ast":null,"code":"import _slicedToArray from \"/Users/cam/real_money_polls/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/cam/real_money_polls/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/cam/real_money_polls/src/components/SlideToggleContent/SlideToggleContent.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  &:before,\\n  &:after {\\n    content: \\\"\\\";\\n    display: table;\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useRef, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { bool, node } from \"prop-types\";\nimport { useTransition, animated } from \"react-spring\";\nimport styled from \"styled-components\";\nconst Inner = styled.div(_templateObject());\nconst visibleStyle = {\n  height: \"auto\",\n  opacity: 1,\n  overflow: \"visible\"\n};\nconst hiddenStyle = {\n  opacity: 0,\n  height: 0,\n  overflow: \"hidden\"\n};\n\nfunction getElementHeight(ref) {\n  return ref.current ? ref.current.getBoundingClientRect().height : 0;\n}\n/** The children of this component will slide down on mount and will slide up on unmount */\n\n\nconst SlideToggleContent = ({\n  isVisible,\n  children,\n  forceSlideIn\n}) => {\n  const isVisibleOnMount = useRef(isVisible && !forceSlideIn);\n  const containerRef = useRef(null);\n  const innerRef = useRef(null);\n  const transitions = useTransition(isVisible, null, {\n    enter: () => async (next, cancel) => {\n      const height = getElementHeight(innerRef);\n      cancel();\n      await next({\n        height,\n        opacity: 1,\n        overflow: \"hidden\"\n      });\n      await next(visibleStyle);\n    },\n    leave: () => async (next, cancel) => {\n      const height = getElementHeight(containerRef);\n      cancel();\n      await next({\n        height,\n        overflow: \"hidden\"\n      });\n      await next(hiddenStyle);\n      isVisibleOnMount.current = false;\n    },\n    from: isVisibleOnMount.current ? visibleStyle : hiddenStyle,\n    unique: true\n  });\n  return transitions.map(({\n    item: show,\n    props: springProps,\n    key\n  }) => {\n    if (show) {\n      return React.createElement(animated.div, {\n        ref: containerRef,\n        key: key,\n        style: springProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(Inner, {\n        ref: innerRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, children));\n    }\n\n    return null;\n  });\n};\n\nSlideToggleContent.defaultProps = {\n  forceSlideIn: false\n};\nSlideToggleContent.propTypes = {\n  /** Should the component mount it's childeren and slide down */\n  isVisible: bool.isRequired,\n\n  /** Makes sure the component always slides in on mount. Otherwise it will be immediately visible if isVisible is true on mount */\n  forceSlideIn: bool,\n\n  /** The slidable content elements */\n  children: node.isRequired\n};\n\nfunction App() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isVisible = _useState2[0],\n        setIsVisible = _useState2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Slide Toggle\"), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setIsVisible(!isVisible),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, isVisible ? \"Close\" : \"Open\", \" content\"), React.createElement(SlideToggleContent, {\n    isVisible: isVisible,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(React.Fragment, null, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Success!! \\uD83C\\uDF89\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"This content will be mounted and unmounted\"))));\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 97\n  },\n  __self: this\n}), rootElement);","map":{"version":3,"sources":["/Users/cam/real_money_polls/src/components/SlideToggleContent/SlideToggleContent.js"],"names":["React","useRef","useState","ReactDOM","bool","node","useTransition","animated","styled","Inner","div","visibleStyle","height","opacity","overflow","hiddenStyle","getElementHeight","ref","current","getBoundingClientRect","SlideToggleContent","isVisible","children","forceSlideIn","isVisibleOnMount","containerRef","innerRef","transitions","enter","next","cancel","leave","from","unique","map","item","show","props","springProps","key","defaultProps","propTypes","isRequired","App","setIsVisible","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { bool, node } from \"prop-types\";\nimport { useTransition, animated } from \"react-spring\";\nimport styled from \"styled-components\";\n\nconst Inner = styled.div`\n  &:before,\n  &:after {\n    content: \"\";\n    display: table;\n  }\n`;\n\nconst visibleStyle = { height: \"auto\", opacity: 1, overflow: \"visible\" };\nconst hiddenStyle = { opacity: 0, height: 0, overflow: \"hidden\" };\n\nfunction getElementHeight(ref) {\n  return ref.current ? ref.current.getBoundingClientRect().height : 0;\n}\n\n/** The children of this component will slide down on mount and will slide up on unmount */\nconst SlideToggleContent = ({ isVisible, children, forceSlideIn }) => {\n  const isVisibleOnMount = useRef(isVisible && !forceSlideIn);\n  const containerRef = useRef(null);\n  const innerRef = useRef(null);\n\n  const transitions = useTransition(isVisible, null, {\n    enter: () => async (next, cancel) => {\n      const height = getElementHeight(innerRef);\n\n      cancel();\n\n      await next({ height, opacity: 1, overflow: \"hidden\" });\n      await next(visibleStyle);\n    },\n    leave: () => async (next, cancel) => {\n      const height = getElementHeight(containerRef);\n\n      cancel();\n\n      await next({ height, overflow: \"hidden\" });\n      await next(hiddenStyle);\n\n      isVisibleOnMount.current = false;\n    },\n    from: isVisibleOnMount.current ? visibleStyle : hiddenStyle,\n    unique: true\n  });\n\n  return transitions.map(({ item: show, props: springProps, key }) => {\n    if (show) {\n      return (\n        <animated.div ref={containerRef} key={key} style={springProps}>\n          <Inner ref={innerRef}>{children}</Inner>\n        </animated.div>\n      );\n    }\n\n    return null;\n  });\n};\n\nSlideToggleContent.defaultProps = {\n  forceSlideIn: false\n};\n\nSlideToggleContent.propTypes = {\n  /** Should the component mount it's childeren and slide down */\n  isVisible: bool.isRequired,\n  /** Makes sure the component always slides in on mount. Otherwise it will be immediately visible if isVisible is true on mount */\n  forceSlideIn: bool,\n  /** The slidable content elements */\n  children: node.isRequired\n};\n\nfunction App() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  return (\n    <>\n      <h1>Slide Toggle</h1>\n      <button type=\"button\" onClick={() => setIsVisible(!isVisible)}>\n        {isVisible ? \"Close\" : \"Open\"} content\n      </button>\n      <SlideToggleContent isVisible={isVisible}>\n        <>\n          <h2>Success!! 🎉</h2>\n          <p>This content will be mounted and unmounted</p>\n        </>\n      </SlideToggleContent>\n    </>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}