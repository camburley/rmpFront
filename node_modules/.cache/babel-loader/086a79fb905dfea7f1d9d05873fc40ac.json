{"ast":null,"code":"var _jsxFileName = \"/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js\";\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts';\nimport MarketBlurb from '../MarketBlurb/MarketBlurb';\nimport EventObj from '../EventObj/EventObj';\nimport axios from 'axios';\nimport { realpath } from 'fs';\n\nclass LiveMarkets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.contracts = [];\n    this.values = [];\n    this.markets = [];\n    this.json = [];\n    this.length = \"\";\n\n    this.logState = () => {\n      console.log('hello');\n      console.log('this.state.allContracts loggedState()', this.state.allContracts);\n      let loopAllContracts = this.state.allContracts;\n      loopAllContracts.map((row, k) => {\n        if (k > 13) {\n          console.log('k within LOOP logState()', k);\n          console.log('row within LOOP logState()', row);\n          this.state.marketContracts.push(row);\n        }\n      });\n    };\n\n    this.refreshIds = () => {\n      let clear = [];\n      this.state.allContracts.map((tix, r) => {\n        if (tix[r] === undefined) {\n          clear.push(tix);\n        }\n      }); //this.logState();\n\n      console.log('clear within refreshIds', clear);\n      this.state.allContracts.push(clear);\n      console.log('this.state.allContracts in refreshIds()', this.state.allContracts);\n      this.componentDidMount();\n      setTimeout(this.getContractIds(), 2000);\n    };\n\n    this.getContractIds = () => {\n      console.log(\"getContractIds() was FIRED!\");\n      console.log('this.state.contractIds[this.props.marketIndex]', this.state.contractIds[this.props.marketIndex]);\n      const contractRow = this.state.allContracts[this.props.marketIndex];\n\n      if (contractRow !== undefined) {\n        const contractRows = contractRow.map((row, y) => {\n          //console.log('y IN CONTRACT IDS', y)\n          //console.log('row IN CONTRACT IDS', row.contract_id)\n          this.state.contractIds.push(row.contract_id);\n          return;\n        }); // now we should have the contractIds\n\n        this.getContractPrices();\n        return console.log('INSIDE getContractIds() / do we have contractIds? this.state.contractIds', this.state.contractIds); // return this.fetchContractPrices();\n      } else {\n        console.log('this.state.contractIds', this.state.contractIds);\n      }\n\n      return this.getContractPrices(this.state.contractIds);\n    };\n\n    this.getContractPrices = ids => {\n      let contractIds = this.state.contractIds;\n      let contractPrices = [];\n      let allPrices = [];\n      console.log('this.state.valuesLength', this.state.contractIds.length);\n\n      for (var i = 0; i < contractIds.length; i++) {\n        const rmpURL = 'https://realmoneypolls.herokuapp.com/api/value/value_list/' + this.state.contractIds[i];\n        contractPrices.push(axios.get(rmpURL)); //this.state.contractsAndValues.push(contractPrices)\n\n        console.log('contractPrices in values list loop', contractPrices);\n        console.log('this.state.contractsAndValues.length', this.state.contractsAndValues.length);\n      } // Inform Promises how to behave\n\n\n      Promise.all(contractPrices).then(response => console.log('response', response) + response.map((res, index) => {\n        allPrices.push(res.data[0][0]);\n        console.log('allPrices', allPrices); //this.state.contractsAndValues.push(res.data[0][0])\n\n        console.log('res.data', res.data[0][0]);\n        this.state.contractsAndValues.push(allPrices[index]);\n        console.log('this.state.contractsAndValues AFTER ALL PRICES ADDED', this.state.contractsAndValues);\n      }).then(this.makeSingleObj())).catch(err => console.log(err));\n    };\n\n    this.ifTest = () => {\n      const realTime = this.state.realTimeData[0];\n\n      if (realTime === undefined) {\n        console.log('No data my G');\n      } else {\n        console.log('I have the data', realTime);\n        return realTime.map((row, k) => {\n          return React.createElement(\"div\", {\n            key: k,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 258\n            },\n            __self: this\n          }, \" \", React.createElement(LiveContracts, {\n            contractName: row.name,\n            contractAvatar: row.image,\n            contractPrice: row.price,\n            contractChange: row.priceChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 258\n            },\n            __self: this\n          }));\n        });\n      }\n\n      this.oneMoretest();\n    };\n\n    this.oneMoretest = () => {\n      console.log('does this wait?');\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \" \", React.createElement(LiveContracts, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }), \" something here\");\n    };\n\n    this.callbackRender = () => {\n      if (this.state.realTimeData[0] === undefined) {\n        console.log('no Data yet');\n      } else {\n        console.log('Def got the data bro');\n        this.ifTest();\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 286\n          },\n          __self: this\n        }, this.ifTest());\n      }\n    };\n\n    this.state = {\n      toggleSwitch: false,\n      marketIds: this.props.eventDatasMarkets,\n      contractIds: [],\n      allContracts: [],\n      marketContracts: [],\n      contractsAndValues: [],\n      onlyValues: [],\n      jsonObj: [],\n      valuesLength: \"\",\n      objLength: [],\n      almostThere: [],\n      currentNames: [],\n      currentPrices: [],\n      loopThruTheseContracts: [],\n      realTimeData: [],\n      objOne: ['5913', '4319', '3537', '5158', '5925', '6077', '4703'],\n      objTwo: ['5913', '4319', '5158', '5914'],\n      objThree: ['5913', '3537', '5158'],\n      objFour: ['5358'],\n      objFive: ['3633', '3698', '5241', '5344']\n    }; // END OF STATE\n  } // END OF CONSTRUCTOR\n\n\n  //Notes: \n  // Need to Get all Market Ids thru props\n  // Need to get all Contracts where Market Ids exist\n  // Need to get all Values where Contract Ids exist \n  // One JSON object to map Contracts and Values\n  // Loop thru JSON, render values in <LiveContracts /> component\n  componentDidMount() {\n    let marketIds = this.state.marketIds;\n    console.log('this.state.marketIds', this.state.marketIds);\n    let themContracts = [];\n\n    for (var i = 0; i < marketIds.length; i++) {\n      const rmpURL = 'https://realmoneypolls.herokuapp.com/api/contract/contract_list/' + marketIds[i];\n      themContracts.push(axios.get(rmpURL));\n      this.state.allContracts.push(themContracts);\n      console.log('themContracts', themContracts);\n    }\n\n    Promise.all(themContracts).then(response => console.log('INSIDE componentDidMount() ðŸ’¬ promise response', response) + response.map((res, index) => {\n      this.state.allContracts.push(res.data[0]);\n      console.log('INSIDE componentDidMount() ðŸ‘‹ this.state.allContracts', this.state.allContracts); //this.getContractIds();\n    })).catch(err => console.log(err));\n  } //  Coming out of componentDidMount(), got this.state.allContracts\n\n\n  checkMarketContracts() {\n    console.log('this.state.marketContracts checkMarketContracts()', this.state.marketContracts);\n  } // Coming out of logState() I can get contractIds for each Contract\n\n\n  async makeSingleObj() {\n    console.log('this.state.allContracts[this.props.marketIndex]', this.state.allContracts[this.props.marketIndex]);\n    console.log('this.state.contractsAndValues', this.state.contractsAndValues);\n    const allContracts = await this.state.allContracts[this.props.marketIndex];\n    const allValues = await this.state.contractsAndValues;\n    const realTimeData = [];\n    await allContracts.map((contract, x) => {\n      console.log(\"this is in combineLoop. What's in contract ðŸ¤” \", contract); // 33 rows in Array \n\n      allValues.map((value, y) => {\n        //console.log('ðŸ¥µ value', value)\n        if (y === x) {\n          const fullObj = {\n            \"contract_id\": contract.contract_id,\n            \"name\": contract.name,\n            \"image\": contract.image,\n            \"price\": value.best_buy_yes_offer,\n            \"priceChange\": (value.last_trade_price - value.last_close_price).toFixed(2)\n          };\n          console.log('ðŸ¤— contract + value (finalObj)', fullObj);\n          realTimeData.push(fullObj);\n          console.log('realTimeData final OBJ', realTimeData);\n        }\n\n        return this.state.realTimeData.push(realTimeData);\n      });\n    });\n    this.ifTest();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"parent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), React.createElement(SlideToggle, {\n      duration: 300,\n      collapsed: true,\n      render: ({\n        toggle,\n        setCollapsibleElement\n      }) => React.createElement(\"div\", {\n        className: toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"LiveMarkets\",\n        onClick: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.refreshIds,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }, \" Refresh Prices\"), \" \", this.props.contractName), React.createElement(SlideToggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"slide-toggle__box\",\n        ref: setCollapsibleElement,\n        onChange: this.oneMoretest,\n        onClick: this.callbackRender,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, this.callbackRender()), React.createElement(MarketBlurb, {\n        blurb: \"PredictIt\\u2019s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\",\n        blurbLink: \" here.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LiveMarkets;","map":{"version":3,"sources":["/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js"],"names":["React","SlideToggle","LiveContracts","MarketBlurb","EventObj","axios","realpath","LiveMarkets","Component","constructor","props","contracts","values","markets","json","length","logState","console","log","state","allContracts","loopAllContracts","map","row","k","marketContracts","push","refreshIds","clear","tix","r","undefined","componentDidMount","setTimeout","getContractIds","contractIds","marketIndex","contractRow","contractRows","y","contract_id","getContractPrices","ids","contractPrices","allPrices","i","rmpURL","get","contractsAndValues","Promise","all","then","response","res","index","data","makeSingleObj","catch","err","ifTest","realTime","realTimeData","name","image","price","priceChange","oneMoretest","callbackRender","toggleSwitch","marketIds","eventDatasMarkets","onlyValues","jsonObj","valuesLength","objLength","almostThere","currentNames","currentPrices","loopThruTheseContracts","objOne","objTwo","objThree","objFour","objFive","themContracts","checkMarketContracts","allValues","contract","x","value","fullObj","best_buy_yes_offer","last_trade_price","last_close_price","toFixed","render","toggle","setCollapsibleElement","contractName"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,IAAzB;;AAOA,MAAMC,WAAN,SAA0BP,KAAK,CAACQ,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AADgB,SAoClBC,SApCkB,GAoCN,EApCM;AAAA,SAqClBC,MArCkB,GAqCT,EArCS;AAAA,SAsClBC,OAtCkB,GAsCR,EAtCQ;AAAA,SAuClBC,IAvCkB,GAuCX,EAvCW;AAAA,SAwClBC,MAxCkB,GAwCT,EAxCS;;AAAA,SAsFpBC,QAtFoB,GAsFT,MAAM;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqD,KAAKC,KAAL,CAAWC,YAAhE;AAEA,UAAIC,gBAAgB,GAAG,KAAKF,KAAL,CAAWC,YAAlC;AAEAC,MAAAA,gBAAgB,CAACC,GAAjB,CAAqB,CAACC,GAAD,EAAMC,CAAN,KAAY;AAC7B,YAAIA,CAAC,GAAG,EAAR,EAAW;AACPP,UAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCM,CAAxC;AACAP,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CK,GAA1C;AACA,eAAKJ,KAAL,CAAWM,eAAX,CAA2BC,IAA3B,CAAgCH,GAAhC;AAEH;AACJ,OAPD;AAQH,KApGmB;;AAAA,SA8GpBI,UA9GoB,GA8GP,MAAM;AACf,UAAIC,KAAK,GAAG,EAAZ;AACA,WAAKT,KAAL,CAAWC,YAAX,CAAwBE,GAAxB,CAA4B,CAACO,GAAD,EAAMC,CAAN,KAAY;AACpC,YAAGD,GAAG,CAACC,CAAD,CAAH,KAAWC,SAAd,EAAwB;AACpBH,UAAAA,KAAK,CAACF,IAAN,CAAWG,GAAX;AACH;AACJ,OAJD,EAFe,CAQf;;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCU,KAAvC;AACA,WAAKT,KAAL,CAAWC,YAAX,CAAwBM,IAAxB,CAA6BE,KAA7B;AACAX,MAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAAuD,KAAKC,KAAL,CAAWC,YAAlE;AAEA,WAAKY,iBAAL;AACAC,MAAAA,UAAU,CAAC,KAAKC,cAAL,EAAD,EAAwB,IAAxB,CAAV;AAEH,KA9HmB;;AAAA,SAgIpBA,cAhIoB,GAgIH,MAAM;AAEnBjB,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ,EAA8D,KAAKC,KAAL,CAAWgB,WAAX,CAAuB,KAAKzB,KAAL,CAAW0B,WAAlC,CAA9D;AACF,YAAMC,WAAW,GAAG,KAAKlB,KAAL,CAAWC,YAAX,CAAwB,KAAKV,KAAL,CAAW0B,WAAnC,CAApB;;AACA,UAAIC,WAAW,KAAKN,SAApB,EAA+B;AAE/B,cAAMO,YAAY,GAAGD,WAAW,CAACf,GAAZ,CAAgB,CAACC,GAAD,EAAMgB,CAAN,KAAY;AAC7C;AACA;AACA,eAAKpB,KAAL,CAAWgB,WAAX,CAAuBT,IAAvB,CAA4BH,GAAG,CAACiB,WAAhC;AAEA;AAEH,SAPoB,CAArB,CAF+B,CAY/B;;AACA,aAAKC,iBAAL;AACA,eAAOxB,OAAO,CAACC,GAAR,CAAY,0EAAZ,EAAwF,KAAKC,KAAL,CAAWgB,WAAnG,CAAP,CAd+B,CAmB/B;AACD,OApBC,MAoBK;AAELlB,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC,KAAKC,KAAL,CAAWgB,WAAjD;AACD;;AAEG,aAAO,KAAKM,iBAAL,CAAuB,KAAKtB,KAAL,CAAWgB,WAAlC,CAAP;AAEH,KAhKmB;;AAAA,SAqKpBM,iBArKoB,GAqKCC,GAAD,IAAS;AACzB,UAAIP,WAAW,GAAG,KAAKhB,KAAL,CAAWgB,WAA7B;AACA,UAAIQ,cAAc,GAAG,EAArB;AACA,UAAIC,SAAS,GAAG,EAAhB;AACI3B,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC,KAAKC,KAAL,CAAWgB,WAAX,CAAuBpB,MAA9D;;AACA,WAAM,IAAI8B,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGV,WAAW,CAACpB,MAAjC,EAAyC8B,CAAC,EAA1C,EAA6C;AACzC,cAAMC,MAAM,GAAG,+DAA+D,KAAK3B,KAAL,CAAWgB,WAAX,CAAuBU,CAAvB,CAA9E;AACAF,QAAAA,cAAc,CAACjB,IAAf,CAAoBrB,KAAK,CAAC0C,GAAN,CAAUD,MAAV,CAApB,EAFyC,CAGzC;;AACA7B,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDyB,cAAlD;AACA1B,QAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoD,KAAKC,KAAL,CAAW6B,kBAAX,CAA8BjC,MAAlF;AAEH,OAZoB,CAcrB;;;AAEAkC,MAAAA,OAAO,CAACC,GAAR,CAAYP,cAAZ,EAA4BQ,IAA5B,CAAkCC,QAAD,IACjCnC,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBkC,QAAxB,IAEIA,QAAQ,CAAC9B,GAAT,CAAa,CAAC+B,GAAD,EAAMC,KAAN,KAEb;AACIV,QAAAA,SAAS,CAAClB,IAAV,CAAe2B,GAAG,CAACE,IAAJ,CAAS,CAAT,EAAY,CAAZ,CAAf;AACAtC,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB0B,SAAzB,EAFJ,CAGI;;AACA3B,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBmC,GAAG,CAACE,IAAJ,CAAS,CAAT,EAAY,CAAZ,CAAxB;AACA,aAAKpC,KAAL,CAAW6B,kBAAX,CAA8BtB,IAA9B,CAAmCkB,SAAS,CAACU,KAAD,CAA5C;AACArC,QAAAA,OAAO,CAACC,GAAR,CAAY,sDAAZ,EAAoE,KAAKC,KAAL,CAAW6B,kBAA/E;AAEH,OAVD,EAaEG,IAbF,CAaO,KAAKK,aAAL,EAbP,CAHJ,EAgBkCC,KAhBlC,CAgByCC,GAAD,IAASzC,OAAO,CAACC,GAAR,CAAYwC,GAAZ,CAhBjD;AAkBP,KAvMmB;;AAAA,SAwOlBC,MAxOkB,GAwOT,MAAM;AACb,YAAMC,QAAQ,GAAG,KAAKzC,KAAL,CAAW0C,YAAX,CAAwB,CAAxB,CAAjB;;AACA,UAAID,QAAQ,KAAK7B,SAAjB,EAA2B;AACvBd,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,OAFD,MAEO;AACHD,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B0C,QAA/B;AAED,eAAOA,QAAQ,CAACtC,GAAT,CAAa,CAACC,GAAD,EAAMC,CAAN,KAAY;AAE3B,iBAAQ;AAAK,YAAA,GAAG,EAAEA,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAc,oBAAC,aAAD;AACd,YAAA,YAAY,EAAED,GAAG,CAACuC,IADJ;AAEd,YAAA,cAAc,EAAEvC,GAAG,CAACwC,KAFN;AAGd,YAAA,aAAa,EAAExC,GAAG,CAACyC,KAHL;AAId,YAAA,cAAc,EAAEzC,GAAG,CAAC0C,WAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAd,CAAR;AAQC,SAVC,CAAP;AAYF;;AACH,WAAKC,WAAL;AACA,KA7PkB;;AAAA,SAiQnBA,WAjQmB,GAiQL,MAAM;AAChBjD,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,aAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAM,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAN,oBAAR;AACH,KApQkB;;AAAA,SAuQnBiD,cAvQmB,GAuQF,MAAM;AACpB,UAAI,KAAKhD,KAAL,CAAW0C,YAAX,CAAwB,CAAxB,MAA+B9B,SAAnC,EAA6C;AACzCd,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH,OAFD,MAEO;AACHD,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,aAAKyC,MAAL;AACJ,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAM,KAAKA,MAAL,EAAN,CAAP;AACC;AACJ,KA/QmB;;AAGhB,SAAKxC,KAAL,GAAW;AACPiD,MAAAA,YAAY,EAAG,KADR;AAEPC,MAAAA,SAAS,EAAG,KAAK3D,KAAL,CAAW4D,iBAFhB;AAGPnC,MAAAA,WAAW,EAAE,EAHN;AAIPf,MAAAA,YAAY,EAAE,EAJP;AAKPK,MAAAA,eAAe,EAAE,EALV;AAMPuB,MAAAA,kBAAkB,EAAE,EANb;AAOPuB,MAAAA,UAAU,EAAE,EAPL;AAQPC,MAAAA,OAAO,EAAE,EARF;AASPC,MAAAA,YAAY,EAAE,EATP;AAUPC,MAAAA,SAAS,EAAE,EAVJ;AAWPC,MAAAA,WAAW,EAAE,EAXN;AAYPC,MAAAA,YAAY,EAAE,EAZP;AAaPC,MAAAA,aAAa,EAAC,EAbP;AAcPC,MAAAA,sBAAsB,EAAE,EAdjB;AAePjB,MAAAA,YAAY,EAAE,EAfP;AAgBPkB,MAAAA,MAAM,EAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,MAAjC,EAAyC,MAAzC,EAAiD,MAAjD,CAhBF;AAiBPC,MAAAA,MAAM,EAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB,CAjBF;AAkBPC,MAAAA,QAAQ,EAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAlBJ;AAmBPC,MAAAA,OAAO,EAAG,CAAC,MAAD,CAnBH;AAoBPC,MAAAA,OAAO,EAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,EAAyB,MAAzB;AApBH,KAAX,CAHgB,CA4Bb;AAMJ,GAnCuC,CAmCtC;;;AASA;AACA;AACA;AACA;AACA;AACA;AAMFnD,EAAAA,iBAAiB,GAAG;AAElB,QAAIqC,SAAS,GAAG,KAAKlD,KAAL,CAAWkD,SAA3B;AACApD,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,KAAKC,KAAL,CAAWkD,SAA/C;AAEA,QAAIe,aAAa,GAAG,EAApB;;AAEA,SAAM,IAAIvC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGwB,SAAS,CAACtD,MAA/B,EAAuC8B,CAAC,EAAxC,EAA2C;AACvC,YAAMC,MAAM,GAAG,qEAAqEuB,SAAS,CAACxB,CAAD,CAA7F;AACAuC,MAAAA,aAAa,CAAC1D,IAAd,CAAmBrB,KAAK,CAAC0C,GAAN,CAAUD,MAAV,CAAnB;AACA,WAAK3B,KAAL,CAAWC,YAAX,CAAwBM,IAAxB,CAA6B0D,aAA7B;AACAnE,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BkE,aAA7B;AACH;;AAEDnC,IAAAA,OAAO,CAACC,GAAR,CAAYkC,aAAZ,EAA2BjC,IAA3B,CAAiCC,QAAD,IAChCnC,OAAO,CAACC,GAAR,CAAY,gDAAZ,EAA8DkC,QAA9D,IAEIA,QAAQ,CAAC9B,GAAT,CAAa,CAAC+B,GAAD,EAAMC,KAAN,KAAgB;AACzB,WAAKnC,KAAL,CAAWC,YAAX,CAAwBM,IAAxB,CAA6B2B,GAAG,CAACE,IAAJ,CAAS,CAAT,CAA7B;AACAtC,MAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ,EAAqE,KAAKC,KAAL,CAAWC,YAAhF,EAFyB,CAGzB;AACH,KAJD,CAHJ,EAQOqC,KARP,CAQcC,GAAD,IAASzC,OAAO,CAACC,GAAR,CAAYwC,GAAZ,CARtB;AAUF,GA/EwC,CAmFzC;;;AAqBD2B,EAAAA,oBAAoB,GAAE;AAClBpE,IAAAA,OAAO,CAACC,GAAR,CAAY,mDAAZ,EAAiE,KAAKC,KAAL,CAAWM,eAA5E;AACH,GA1GyC,CA6G1C;;;AA6FA,QAAM+B,aAAN,GAAsB;AAClBvC,IAAAA,OAAO,CAACC,GAAR,CAAY,iDAAZ,EAA+D,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKV,KAAL,CAAW0B,WAAnC,CAA/D;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6C,KAAKC,KAAL,CAAW6B,kBAAxD;AACA,UAAM5B,YAAY,GAAG,MAAM,KAAKD,KAAL,CAAWC,YAAX,CAAwB,KAAKV,KAAL,CAAW0B,WAAnC,CAA3B;AACA,UAAMkD,SAAS,GAAG,MAAO,KAAKnE,KAAL,CAAW6B,kBAApC;AAGA,UAAMa,YAAY,GAAG,EAArB;AACA,UAAMzC,YAAY,CAACE,GAAb,CAAiB,CAACiE,QAAD,EAAWC,CAAX,KAAiB;AACpCvE,MAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ,EAA8DqE,QAA9D,EADoC,CAGpC;;AACAD,MAAAA,SAAS,CAAChE,GAAV,CAAc,CAACmE,KAAD,EAAQlD,CAAR,KAAc;AACxB;AACA,YAAIA,CAAC,KAAKiD,CAAV,EAAY;AACZ,gBAAME,OAAO,GAAG;AAAC,2BAAeH,QAAQ,CAAC/C,WAAzB;AAAsC,oBAAQ+C,QAAQ,CAACzB,IAAvD;AAA6D,qBAASyB,QAAQ,CAACxB,KAA/E;AAAsF,qBAAU0B,KAAK,CAACE,kBAAtG;AAA0H,2BAAe,CAACF,KAAK,CAACG,gBAAN,GAAyBH,KAAK,CAACI,gBAAhC,EAAkDC,OAAlD,CAA0D,CAA1D;AAAzI,WAAhB;AACA7E,UAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CwE,OAA9C;AACA7B,UAAAA,YAAY,CAACnC,IAAb,CAAkBgE,OAAlB;AACAzE,UAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC2C,YAAtC;AACH;;AACG,eAAO,KAAK1C,KAAL,CAAW0C,YAAX,CAAwBnC,IAAxB,CAA6BmC,YAA7B,CAAP;AAEH,OAVD;AAWH,KAfK,CAAN;AAiBA,SAAKF,MAAL;AAEH;;AA+CDoC,EAAAA,MAAM,GAAG;AAIP,WAGF;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACa;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADb,EAKI,oBAAC,WAAD;AACA,MAAA,QAAQ,EAAE,GADV;AAEA,MAAA,SAAS,MAFT;AAGA,MAAA,MAAM,EAAE,CAAC;AACPC,QAAAA,MADO;AAEPC,QAAAA;AAFO,OAAD,KAKJ;AAAK,QAAA,SAAS,EAAGD,MAAM,GAAG,eAAH,GAAqB,qBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA;AAAK,QAAA,SAAS,EAAC,aAAf;AAA8B,QAAA,OAAO,EAAEA,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAQ,QAAA,OAAO,EAAE,KAAKrE,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADA,OAC6D,KAAKjB,KAAL,CAAWwF,YADxE,CAFA,EAOE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAmC,QAAA,GAAG,EAAED,qBAAxC;AAAgE,QAAA,QAAQ,EAAE,KAAK/B,WAA/E;AAA4F,QAAA,OAAO,EAAE,KAAKC,cAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAM,KAAKA,cAAL,EAAN,CAJG,EAWF,oBAAC,WAAD;AACA,QAAA,KAAK,EAAC,wJADN;AAEA,QAAA,SAAS,EAAC,QAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXE,CADJ,CAPF,CARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CAHE;AAsDA;;AA9UwC;;AAgV1C,eAAe5D,WAAf","sourcesContent":["\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts'\nimport MarketBlurb from '../MarketBlurb/MarketBlurb'\nimport EventObj from '../EventObj/EventObj'\nimport axios from 'axios';\nimport { realpath } from 'fs';\n\n\ntype Props = {\n    getContractIds: Function,\n  };\n\nclass LiveMarkets extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n        toggleSwitch : false,\n        marketIds : this.props.eventDatasMarkets,\n        contractIds: [],\n        allContracts: [],\n        marketContracts: [],\n        contractsAndValues: [],\n        onlyValues: [],\n        jsonObj: [],\n        valuesLength: \"\",\n        objLength: [], \n        almostThere: [],\n        currentNames: [],\n        currentPrices:[],\n        loopThruTheseContracts: [],\n        realTimeData: [],\n        objOne : ['5913', '4319', '3537', '5158', '5925', '6077', '4703'],\n        objTwo : ['5913', '4319', '5158', '5914'],\n        objThree : ['5913', '3537', '5158'],\n        objFour : ['5358'],\n        objFive : ['3633', '3698', '5241', '5344']\n       \n\n\n\n    }; // END OF STATE\n\n\n\n\n\n  } // END OF CONSTRUCTOR\n\n  contracts = []\n  values = []\n  markets = []\n  json = []\n  length = \"\"\n\n\n    //Notes: \n    // Need to Get all Market Ids thru props\n    // Need to get all Contracts where Market Ids exist\n    // Need to get all Values where Contract Ids exist \n    // One JSON object to map Contracts and Values\n    // Loop thru JSON, render values in <LiveContracts /> component\n\n     \n\n\n\n  componentDidMount() {\n  \n    let marketIds = this.state.marketIds\n    console.log('this.state.marketIds', this.state.marketIds)\n\n    let themContracts = [];\n\n    for ( var i = 0; i < marketIds.length; i++){\n        const rmpURL = 'https://realmoneypolls.herokuapp.com/api/contract/contract_list/' + marketIds[i];\n        themContracts.push(axios.get(rmpURL));\n        this.state.allContracts.push(themContracts)\n        console.log('themContracts', themContracts)\n    }\n\n    Promise.all(themContracts).then((response) => \n    console.log('INSIDE componentDidMount() ðŸ’¬ promise response', response) +\n    \n        response.map((res, index) => {\n            this.state.allContracts.push(res.data[0])\n            console.log('INSIDE componentDidMount() ðŸ‘‹ this.state.allContracts', this.state.allContracts)\n            //this.getContractIds();\n        }\n        )).catch((err) => console.log(err));\n        \n }\n\n\n\n //  Coming out of componentDidMount(), got this.state.allContracts\n\n \n \nlogState = () => {\n    console.log('hello')\n    console.log('this.state.allContracts loggedState()', this.state.allContracts)\n\n    let loopAllContracts = this.state.allContracts\n\n    loopAllContracts.map((row, k) => {\n        if (k > 13){\n            console.log('k within LOOP logState()', k)\n            console.log('row within LOOP logState()', row)\n            this.state.marketContracts.push(row)\n\n        }\n    })\n}\n\n\ncheckMarketContracts(){\n    console.log('this.state.marketContracts checkMarketContracts()', this.state.marketContracts)\n}\n\n\n// Coming out of logState() I can get contractIds for each Contract\n\nrefreshIds = () => {\n    let clear = [];\n    this.state.allContracts.map((tix, r) => {\n        if(tix[r] === undefined){\n            clear.push(tix)\n        }\n    })\n\n    //this.logState();\n    console.log('clear within refreshIds', clear)\n    this.state.allContracts.push(clear) \n    console.log('this.state.allContracts in refreshIds()', this.state.allContracts)\n  \n    this.componentDidMount();\n    setTimeout(this.getContractIds(), 2000);\n    \n}\n\ngetContractIds = () => {\n\n    console.log(\"getContractIds() was FIRED!\")\n    console.log('this.state.contractIds[this.props.marketIndex]', this.state.contractIds[this.props.marketIndex])\n  const contractRow = this.state.allContracts[this.props.marketIndex]\n  if (contractRow !== undefined) {\n      \n  const contractRows = contractRow.map((row, y) => {\n      //console.log('y IN CONTRACT IDS', y)\n      //console.log('row IN CONTRACT IDS', row.contract_id)\n      this.state.contractIds.push(row.contract_id)\n      \n      return;\n\n  })\n  \n\n  // now we should have the contractIds\n  this.getContractPrices();\n  return console.log('INSIDE getContractIds() / do we have contractIds? this.state.contractIds', this.state.contractIds);\n  \n  \n\n  \n  // return this.fetchContractPrices();\n} else {\n\n  console.log('this.state.contractIds', this.state.contractIds)\n}\n    \n    return this.getContractPrices(this.state.contractIds)\n\n}\n\n\n\n\ngetContractPrices = (ids) => {\n    let contractIds = this.state.contractIds\n    let contractPrices = [];\n    let allPrices = [];\n        console.log('this.state.valuesLength', this.state.contractIds.length);\n        for ( var i = 0; i < contractIds.length; i++){\n            const rmpURL = 'https://realmoneypolls.herokuapp.com/api/value/value_list/' + this.state.contractIds[i];\n            contractPrices.push(axios.get(rmpURL));\n            //this.state.contractsAndValues.push(contractPrices)\n            console.log('contractPrices in values list loop', contractPrices)\n            console.log('this.state.contractsAndValues.length', this.state.contractsAndValues.length)\n            \n        }\n    \n        // Inform Promises how to behave\n\n        Promise.all(contractPrices).then((response) => \n        console.log('response', response) +\n        \n            response.map((res, index) => \n            \n            {\n                allPrices.push(res.data[0][0]);\n                console.log('allPrices', allPrices)\n                //this.state.contractsAndValues.push(res.data[0][0])\n                console.log('res.data', res.data[0][0])\n                this.state.contractsAndValues.push(allPrices[index])\n                console.log('this.state.contractsAndValues AFTER ALL PRICES ADDED', this.state.contractsAndValues)\n                \n            } \n                \n            \n            ).then(this.makeSingleObj())).catch((err) => console.log(err));\n\n}\n\nasync makeSingleObj() {\n    console.log('this.state.allContracts[this.props.marketIndex]', this.state.allContracts[this.props.marketIndex])\n    console.log('this.state.contractsAndValues', this.state.contractsAndValues)\n    const allContracts = await this.state.allContracts[this.props.marketIndex]\n    const allValues = await  this.state.contractsAndValues\n\n    \n    const realTimeData = [];\n    await allContracts.map((contract, x) => {\n        console.log(\"this is in combineLoop. What's in contract ðŸ¤” \", contract)\n        \n        // 33 rows in Array \n        allValues.map((value, y) => {\n            //console.log('ðŸ¥µ value', value)\n            if (y === x){\n            const fullObj = {\"contract_id\": contract.contract_id, \"name\": contract.name, \"image\": contract.image, \"price\" : value.best_buy_yes_offer, \"priceChange\": (value.last_trade_price - value.last_close_price).toFixed(2)}\n            console.log('ðŸ¤— contract + value (finalObj)', fullObj )\n            realTimeData.push(fullObj);\n            console.log('realTimeData final OBJ', realTimeData)\n        }\n            return this.state.realTimeData.push(realTimeData)\n\n        })\n    })\n\n    this.ifTest();\n\n}\n\n\n\n  ifTest = () => {\n    const realTime = this.state.realTimeData[0];\n    if (realTime === undefined){\n        console.log('No data my G')\n    } else {\n        console.log('I have the data', realTime)\n        \n       return realTime.map((row, k) => {\n\n            return  <div key={k}> <LiveContracts \n                    contractName={row.name}\n                    contractAvatar={row.image}\n                    contractPrice={row.price}\n                    contractChange={row.priceChange}\n                    /></div>\n        \n                \n            })\n\n    }\n  this.oneMoretest();\n }\n \n\n    \n oneMoretest = () => {\n     console.log('does this wait?')\n     return (<div> <LiveContracts /> something here</div>)\n }\n\n\n callbackRender = () => {\n    if (this.state.realTimeData[0] === undefined){\n        console.log('no Data yet')\n    } else {\n        console.log('Def got the data bro');\n        this.ifTest();\n    return <div>{this.ifTest()}</div>\n    }\n}\n\n\n\nrender() {\n\n   \n\n  return (\n          \n\n<div className=\"parent\" >\n             <div className=\"one\" >\n              \n             </div>\n\n    <SlideToggle\n    duration={300}\n    collapsed\n    render={({\n      toggle,\n      setCollapsibleElement\n    }) => (\n\n        <div className={ toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive'}  > \n       \n        <div className=\"LiveMarkets\"  onClick={toggle} >\n        <button onClick={this.refreshIds} > Refresh Prices</button> {this.props.contractName} \n        \n    \n          </div>\n          <SlideToggle >\n              <div className=\"slide-toggle__box\" ref={setCollapsibleElement}  onChange={this.oneMoretest} onClick={this.callbackRender}>\n              \n            \n\n           <div>{this.callbackRender()}</div>\n           \n           \n    \n      \n            \n\n            <MarketBlurb \n            blurb=\"PredictItâ€™s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\"\n            blurbLink=\" here.\"\n            \n            />\n        \n        </div>\n       \n        </SlideToggle>\n\n\n      </div>\n      )}\n    \n      />\n      </div>\n\n           \n  )\n }\n}\nexport default LiveMarkets;\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}