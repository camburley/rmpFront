{"ast":null,"code":"var _jsxFileName = \"/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js\";\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts';\nimport MarketBlurb from '../MarketBlurb/MarketBlurb';\nimport axios from 'axios';\nimport { objectTypeSpreadProperty, nullLiteral } from '@babel/types';\n\nclass LiveMarkets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.globalContracts = [];\n    this.globalContractIds = [];\n    this.globalNames = [];\n    this.globalArray = [];\n    this.bigObj = [];\n\n    this.toggleActive = () => {\n      this.setState({\n        active: !this.state.active\n      });\n    };\n\n    this.state = {\n      contracts: [],\n      contractNames: [],\n      contractIds: [],\n      contractPrices: []\n    };\n    this.createContracts = this.createContracts.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n  }\n\n  valuesLoop() {\n    // check contractIds array -- see if they're all there\n    console.log('this.globalContractIds -- BEFORE valuesLoop() begins...', this.globalContractIds);\n    console.log('this.globalArray -- BEFORE valuesLoop() begins...', this.globalArray); // checked!\n\n    const idsArray = this.globalContractIds;\n    this.values = idsArray.forEach((array, index) => {\n      if (this.globalArray.length <= 1) {\n        console.log('array', array);\n        axios.get('http://localhost:3002/api/value/value_list/' + array).then(res => {\n          const priceGroupings = {\n            \"contractPrice\": res.data[0][0].best_buy_yes_offer,\n            \"contractChange\": (res.data[0][0].last_trade_price - res.data[0][0].last_close_price).toFixed(2)\n          };\n          this.globalArray.push(priceGroupings);\n          this.createContracts();\n          return;\n        }); // end of prices call\n      } // if statement\n\n    });\n  }\n\n  async componentDidMount() {\n    //Get contracts\n    axios.get('http://localhost:3002/api/contract/contract_list/' + this.props.mId1Title).then(res => {\n      // this.setState({ contracts: res.data[0] });\n      console.log('res.data[0] NO IDs in Global Contracts', res.data[0]);\n      this.globalContracts.push(res.data[0]);\n      const contracts = this.globalContracts;\n      console.log('contracts[0] how many b4 i run this loop?', contracts[0]);\n      contracts[0].map((contract, index) => {\n        console.log('this.globalContracts BEFORE ADDING TO ARRAY', this.globalContracts);\n        console.log('this.globalContractIds BEFORE ADDING TO ARRAY', this.globalContractIds);\n        this.globalContractIds.push(contract.contract_id);\n        const namesUrls = {\n          \"name\": contract.name,\n          \"url\": contract.image\n        };\n        this.globalNames.push(namesUrls);\n      });\n      this.setState({\n        contractIds: this.globalContractIds\n      });\n      return;\n    });\n  }\n\n  createContracts() {\n    setTimeout(5500); //console.log('this.globalArray prices -- WITHIN createContracts()', this.globalArray)\n    //console.log('this.globalContracts --  WITHIN createContracts()', this.globalContracts)\n    //console.log('this.globalNames --  WITHIN createContracts()', this.globalNames)\n\n    if (this.globalNames.length === this.globalArray.length) {\n      this.globalNames.map((row, index) => {\n        this.globalArray.map((line, k) => {\n          if (k === index) {\n            const jointObj = {\n              \"name\": row.name,\n              \"url\": row.url,\n              \"contractPrice\": line.contractPrice,\n              \"contractChange\": line.contractChange\n            };\n\n            if (this.bigObj.length === this.globalNames.length) {\n              console.log('im done....total rows =' + this.bigObj.length);\n            }\n\n            this.bigObj.push(jointObj);\n            console.log('this.bogObj', this.bigObj);\n          } else {}\n        });\n        return;\n      });\n    } else {}\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"parent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(SlideToggle, {\n      duration: 300,\n      collapsed: true,\n      render: ({\n        toggle,\n        progress,\n        setCollapsibleElement,\n        range\n      }) => React.createElement(\"div\", {\n        className: toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive',\n        onClick: toggle,\n        onChange: this.valuesLoop(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"LiveMarkets\",\n        onClick: this.props.theToggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, this.props.contractName), React.createElement(SlideToggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"slide-toggle__box\",\n        ref: setCollapsibleElement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, this.bigObj.map((obj, index) => {\n        const name = obj.name;\n        const url = obj.url;\n        const price = obj.contractPrice;\n        const change = obj.contractChange;\n        return React.createElement(LiveContracts, {\n          key: index,\n          contractName: name,\n          contractAvatar: url,\n          contractPrice: price,\n          contractChange: change,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        });\n      }), React.createElement(MarketBlurb, {\n        blurb: \"PredictIt\\u2019s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\",\n        blurbLink: \" here.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LiveMarkets;","map":{"version":3,"sources":["/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js"],"names":["React","SlideToggle","LiveContracts","MarketBlurb","axios","objectTypeSpreadProperty","nullLiteral","LiveMarkets","Component","constructor","props","globalContracts","globalContractIds","globalNames","globalArray","bigObj","toggleActive","setState","active","state","contracts","contractNames","contractIds","contractPrices","createContracts","bind","componentDidMount","valuesLoop","console","log","idsArray","values","forEach","array","index","length","get","then","res","priceGroupings","data","best_buy_yes_offer","last_trade_price","last_close_price","toFixed","push","mId1Title","map","contract","contract_id","namesUrls","name","image","setTimeout","row","line","k","jointObj","url","contractPrice","contractChange","render","toggle","progress","setCollapsibleElement","range","theToggle","contractName","obj","price","change"],"mappings":"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","sourcesContent":["\n\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts'\nimport MarketBlurb from '../MarketBlurb/MarketBlurb'\nimport axios from 'axios';\nimport { objectTypeSpreadProperty, nullLiteral } from '@babel/types';\n\n\nclass LiveMarkets extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n        contracts: [],\n        contractNames: [],\n        contractIds: [],\n        contractPrices: [],\n      \n\n\n    };\n\n    this.createContracts = this.createContracts.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n\n  \n  }\n\n  globalContracts = [];\n  globalContractIds = [];\n  globalNames = [];\n  globalArray = [];\n  bigObj= [];\n\n\n  valuesLoop(){\n    // check contractIds array -- see if they're all there\n    console.log('this.globalContractIds -- BEFORE valuesLoop() begins...', this.globalContractIds);\n    console.log('this.globalArray -- BEFORE valuesLoop() begins...', this.globalArray);\n    // checked!\n\n    const idsArray = this.globalContractIds\n    this.values = idsArray.forEach((array, index) => {\n        if (this.globalArray.length <= 1 ){\n\n        console.log('array', array)\n       \n        axios.get('http://localhost:3002/api/value/value_list/' + array).then(res =>{\n\n        const priceGroupings = {\"contractPrice\": res.data[0][0].best_buy_yes_offer, \"contractChange\": (res.data[0][0].last_trade_price - res.data[0][0].last_close_price).toFixed(2)}\n        this.globalArray.push(priceGroupings)\n\n        this.createContracts()\n     \n\n     return;\n        \n    \n    }) \n    // end of prices call\n    } // if statement\n    });\n    }\n\n  \n\n  async componentDidMount() {\n\n\n      //Get contracts\n   axios.get('http://localhost:3002/api/contract/contract_list/'+ this.props.mId1Title).then(res => { \n        // this.setState({ contracts: res.data[0] });\n        console.log('res.data[0] NO IDs in Global Contracts', res.data[0])\n        this.globalContracts.push(res.data[0])\n        const contracts = this.globalContracts\n        console.log('contracts[0] how many b4 i run this loop?', contracts[0])\n\n        contracts[0].map((contract, index) => {\n            \n            console.log('this.globalContracts BEFORE ADDING TO ARRAY', this.globalContracts)\n            console.log('this.globalContractIds BEFORE ADDING TO ARRAY', this.globalContractIds)\n             this.globalContractIds.push(contract.contract_id)\n             const namesUrls = {\"name\": contract.name, \"url\": contract.image }\n             this.globalNames.push(namesUrls)\n\n            \n        }\n        )\n        this.setState({ contractIds : this.globalContractIds})\n        return ;\n        \n    }\n    );\n\n    }\n\n\n\n  toggleActive = () => {\n\n      this.setState({ active: !this.state.active })\n  }\n\n\n  createContracts(){\n\n    setTimeout(5500)\n\n    //console.log('this.globalArray prices -- WITHIN createContracts()', this.globalArray)\n    //console.log('this.globalContracts --  WITHIN createContracts()', this.globalContracts)\n    //console.log('this.globalNames --  WITHIN createContracts()', this.globalNames)\n\n\n   \n    if (this.globalNames.length === this.globalArray.length){this.globalNames.map((row, index)=>{\n        this.globalArray.map((line, k) => {\n            if(k === index){\n                const jointObj = {\"name\": row.name, \"url\": row.url, \"contractPrice\": line.contractPrice, \"contractChange\": line.contractChange}\n                if (this.bigObj.length === this.globalNames.length){\n                    console.log('im done....total rows =' + this.bigObj.length);\n                }\n                this.bigObj.push(jointObj);\n                console.log('this.bogObj', this.bigObj);\n            } else {\n                \n            }\n        })\n        return;\n    })\n} else {\n        \n    }\n\n  }\n\n\n\n \n\n\nrender() {\n\n \n  return (\n         <div className=\"parent\">\n             <div className=\"one\">\n                 \n             </div>\n\n    <SlideToggle\n    duration={300}\n    collapsed\n    render={({\n      toggle,\n      progress,\n      setCollapsibleElement,\n      range,\n    }) => (\n\n        <div className={ toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive'} onClick={toggle} onChange={this.valuesLoop()} >\n        \n        <div className=\"LiveMarkets\"  onClick={this.props.theToggle} >\n        {this.props.contractName}\n    \n          </div>\n          <SlideToggle >\n              <div className=\"slide-toggle__box\" ref={setCollapsibleElement}>\n                  \n               \n               {\n               \n               this.bigObj.map((obj, index) => {\n                const name = obj.name;\n                const url = obj.url;\n                const price = obj.contractPrice;\n                const change = obj.contractChange;\n                return (\n                     \n                            <LiveContracts\n                            key={index}\n                            contractName={name}\n                            contractAvatar={url}\n                            contractPrice={price}\n                            contractChange={change}\n                            \n                         \n                            />\n                )\n\n\n               })\n               }\n\n              \n\n            <MarketBlurb \n            blurb=\"PredictIt’s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\"\n            blurbLink=\" here.\"\n            \n            />\n        \n        </div>\n       \n        </SlideToggle>\n\n       \n        \n\n   \n\n\n      \n      </div>\n      )}\n    \n      />\n      </div>\n  );\n }\n}\nexport default LiveMarkets;"]},"metadata":{},"sourceType":"module"}