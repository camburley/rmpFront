{"ast":null,"code":"var _jsxFileName = \"/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js\";\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts';\nimport MarketBlurb from '../MarketBlurb/MarketBlurb';\nimport axios from 'axios';\nimport { objectTypeSpreadProperty, nullLiteral, breakStatement } from '@babel/types';\n\nclass LiveMarkets extends React.Component {\n  constructor(props) {\n    super(props);\n    this.globalContracts = [];\n    this.globalContractIds = [];\n    this.globalNames = [];\n    this.globalArray = [];\n    this.raw_prices = [];\n    this.bigObj = [];\n    this.globalNamesLength = \"\";\n    this.putIndex = [];\n    this.market_ids = [];\n    this.marketIds = [];\n    this.largestObj = [];\n    this.unique_array = [];\n    this.createContracts = this.createContracts.bind(this);\n    this.getContractPrices = this.getContractPrices.bind(this);\n    this.componentDidMount = this.componentDidMount.bind(this);\n    this.state = {\n      active: false,\n      contracts: [],\n      contractNames: [],\n      contractIds: [],\n      contractPrices: [],\n      globalNames: [],\n      globalArray: [],\n      globalPrices: [],\n      unique_array: []\n    };\n  }\n\n  async moveData(contracts) {\n    contracts[0].map((contract, index) => {\n      console.log('this.globalContracts[0] BEFORE ADDING TO ARRAY', this.globalContracts[0]);\n      console.log('this.globalContractIds BEFORE ADDING TO ARRAY', this.globalContractIds);\n      this.globalContractIds.push(contract.contract_id);\n      const namesUrls = {\n        \"name\": contract.name,\n        \"url\": contract.image,\n        \"id\": contract.contract_id,\n        \"index\": index\n      };\n      this.globalNames.push(namesUrls);\n      this.globalNamesLength = this.globalNames.length;\n      console.log('this.globalContractIds AFTER PUSHING TO ARRAY', this.globalContractIds);\n      console.log('this.state.contractPrices AFTER PUSHING TO ARRAY', this.state.contractPrices);\n      return this.globalNames;\n    }); // END OF LOOP\n  }\n\n  async componentDidMount() {\n    this.marketIds.push(this.props.mId1Title);\n    console.log('this.marketIds', this.marketIds);\n\n    if (this.globalNames.length > 0) {\n      this.state.globalNames.push(this.globalNames);\n    }\n\n    this.marketIds.map((Id, index) => {\n      //Get contracts\n      axios.get('http://localhost:3002/api/contract/contract_list/' + Id).then(res => {\n        // this.setState({ contracts: res.data[0] });\n        console.log('res.data[0] NO IDs in Global Contracts', res.data[0]);\n        this.globalContracts.push(res.data[0]);\n        const contracts = this.globalContracts;\n        console.log('contracts[0] how many b4 i run this loop?', contracts[0]);\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, this.moveData(contracts));\n      } // something end of call \n      );\n    });\n  }\n\n  getContractPrices() {\n    // check contractIds array -- see if they're all there\n    console.log('IF THIS LOG IS FIRED, WE KNOW THE FUNCTION BEING CALLED');\n    console.log('this.globalContractIds -- BEFORE valuesLoop() begins...', this.globalContractIds);\n    console.log('this.globalArray -- BEFORE valuesLoop() begins...', this.globalArray); // checked!\n\n    const idsArray = this.globalContractIds;\n    console.log('idsArray TIP TOP of getContractPrices', idsArray);\n    console.log('ðŸ¥¶');\n    axios.get('http://localhost:3002/api/value/value_list/' + idsArray).then(res => {\n      console.log('ðŸš¨');\n      console.log('res', res.data[0][0]);\n      let contractPrices = res.data[0][0];\n      this.setState({\n        contractPrices\n      });\n    }); // end of prices call\n  }\n\n  async getLiveContractData(row, price) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \" \", React.createElement(LiveContracts, {\n      contractName: row.name,\n      contractAvatar: row.url,\n      contractPrice: price.contractPrice,\n      contractChange: price.contractChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), \" \");\n  }\n\n  async createContracts(globalNames, globalArray) {\n    console.log('this.raw_prices', this.raw_prices);\n    console.log('FIRSTTTTTTTT this.state.globalNames INSIDE CREATE CONTRACTS METHOD', this.state.globalNames);\n    console.log('FIRSTTTTTTTT this.state.globalArray INSIDE CREATE CONTRACTS METHOD', this.state.globalArray);\n    globalNames = this.globalNames;\n    globalArray = this.globalArray;\n    console.log('globalNames INSIDE CREATE CONTRACTS METHOD', globalNames);\n    console.log('globalArray INSIDE CREATE CONTRACTS METHOD', globalArray);\n    this.state.globalNames.push(globalNames);\n    this.state.globalArray.push(globalArray);\n    console.log('this.state.globalNames INSIDE CREATE CONTRACTS METHOD', this.state.globalNames);\n    console.log('this.state.globalArray INSIDE CREATE CONTRACTS METHOD', this.state.globalArray);\n    return globalNames.map(row => globalArray.map(price => row.id === price.contract_id ? React.createElement(\"div\", {\n      key: row.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, this.getLiveContractData(row, price), console.log('in createContracts row', row), console.log('in createContracts price', price)) : null));\n    /*\n    \n    \n    \n    function removeDuplicates(bigObj){\n        let unique_array = []\n        for(let i = 0;i < bigObj.length; i++){\n            if(unique_array.indexOf(bigObj[i].id && bigObj[i].name) === -1){\n                //unique_array.push(\"id\" + arr[i].id)\n                //unique_array.push(\"name\" + arr[i].name)\n                //unique_array.push(\"contractPrice\" + arr[i].contractPrice)\n                //unique_array.push(\"contractChange\" + arr[i].contractChange)\n    \n                unique_array.push([bigObj[i].name]);\n                unique_array.push({\n                    \"id\": bigObj[i].id,\n                    \"contract_id\": bigObj[i].contract_id,\n                    \"name\": bigObj[i].name,\n                    \"url\": bigObj[i].url,\n                    \"contractPrice\": bigObj[i].contractPrice,\n                    \"contractChange\": bigObj[i].contractChange\n                });\n                \n    \n               \n            }\n    \n        }\n        return unique_array\n    }\n    \n    \n    console.log('removeDuplicates(this.bigObj)', removeDuplicates(this.bigObj));\n    console.log('this.unique_array', this.unique_array);\n    this.unique_array.push(removeDuplicates(this.bigObj))\n    console.log('removeDuplicates(this.bigObj)', removeDuplicates(this.bigObj));\n    console.log('this.unique_array HERE???????', this.unique_array);\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    function removeDuplicates(arr){\n        let unique_array = []\n        for(let i = 0;i < arr.length; i++){\n            if(unique_array.indexOf(arr[i].id) === -1 && unique_array.indexOf(arr[i].contract_id) === -1 && unique_array.indexOf(arr[i].name) === -1 && unique_array.indexOf(arr[i].contractPrice) === -1 && unique_array.indexOf(arr[i].contractChange) === -1 && unique_array.indexOf(arr[i].url) === -1){\n                console.log('arr[i].name', arr[i].name )\n                console.log('arr[i].url', arr[i].url )\n                console.log('arr[i].contractPrices', arr[i].contractPrice )\n                console.log('arr[i].contractChange', arr[i].contractChange )\n                console.log('arr[i].contract_id', arr[i].contract_id )\n                console.log('arr[i].id', arr[i].id )\n                //this.bigObj = [];\n                const scrubbedData = {\"name\" : arr[i].name , \"url\" : arr[i].url ,  \"contractPrices\" : arr[i].contractPrice , \"contractChange\" : arr[i].contractChange, \"contract_id\" : arr[i].contract_id , \"id\" : arr[i].id}\n                const scrubby = [arr[i].name && arr[i].name];\n                console.log('scrubbedData', scrubbedData)\n                //this.bigObj.push(scrubbedData)\n                unique_array.push(scrubbedData)\n                \n                console.log('unique_array', unique_array)\n               \n            }\n        }\n        return unique_array\n    }\n    \n    console.log('removeDuplicates(this.bigObj)', removeDuplicates(this.bigObj)); \n    \n    \n    \n    \n    \n    this.globalArray.map((line, k) => {\n                    if ( index === k) {\n                console.log('row.id INSIDE', row.contract_id)      \n                console.log('line.id INSIDE', line.id)\n                console.log('k', k)\n                console.log('index', index)\n               \n               \n              \n                \n    \n                const jointObj = {\"name\": row.name, \"url\": row.url, \"contractPrice\": line.contractPrice, \"contractChange\": line.contractChange, \"contract_id\": line.contract_id, \"id\": row.id, \"repeat\": 0}\n                console.log('this.jointObj', jointObj)\n                this.bigObj.push(jointObj);\n                \n                console.log('this.bogObj', this.bigObj);\n               \n            } else {\n                breakStatement();\n            }\n             \n        })\n    \n    \n    \n    */\n  }\n\n  pricesFire() {\n    this.getContractPrices();\n  }\n\n  render() {\n    console.log('this.state.globalNames IN RENDER', this.state.globalNames);\n    console.log('this.state.globalArray IN RENDER', this.state.globalArray);\n    return React.createElement(\"div\", {\n      className: \"parent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334\n      },\n      __self: this\n    }), React.createElement(SlideToggle, {\n      duration: 300,\n      collapsed: true,\n      render: ({\n        toggle,\n        progress,\n        setCollapsibleElement,\n        range\n      }) => React.createElement(\"div\", {\n        className: toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive',\n        onChange: () => this.getContractPrices(),\n        onClick: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"LiveMarkets\",\n        onClick: this.getLiveContractData,\n        onChange: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, this.props.contractName), React.createElement(SlideToggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"slide-toggle__box\",\n        ref: setCollapsibleElement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, this.thisgetcontractPrices, React.createElement(MarketBlurb, {\n        blurb: \"PredictIt\\u2019s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\",\n        blurbLink: \" here.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LiveMarkets;","map":{"version":3,"sources":["/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js"],"names":["React","SlideToggle","LiveContracts","MarketBlurb","axios","objectTypeSpreadProperty","nullLiteral","breakStatement","LiveMarkets","Component","constructor","props","globalContracts","globalContractIds","globalNames","globalArray","raw_prices","bigObj","globalNamesLength","putIndex","market_ids","marketIds","largestObj","unique_array","createContracts","bind","getContractPrices","componentDidMount","state","active","contracts","contractNames","contractIds","contractPrices","globalPrices","moveData","map","contract","index","console","log","push","contract_id","namesUrls","name","image","length","mId1Title","Id","get","then","res","data","idsArray","setState","getLiveContractData","row","price","url","contractPrice","contractChange","id","pricesFire","render","toggle","progress","setCollapsibleElement","range","contractName","thisgetcontractPrices"],"mappings":";AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,wBAAT,EAAmCC,WAAnC,EAAgDC,cAAhD,QAAsE,cAAtE;;AAGA,MAAMC,WAAN,SAA0BR,KAAK,CAACS,SAAhC,CAA0C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AADgB,SA2BlBC,eA3BkB,GA2BA,EA3BA;AAAA,SA4BlBC,iBA5BkB,GA4BE,EA5BF;AAAA,SA6BlBC,WA7BkB,GA6BJ,EA7BI;AAAA,SA8BlBC,WA9BkB,GA8BJ,EA9BI;AAAA,SA+BlBC,UA/BkB,GA+BL,EA/BK;AAAA,SAgClBC,MAhCkB,GAgCV,EAhCU;AAAA,SAiClBC,iBAjCkB,GAiCE,EAjCF;AAAA,SAkClBC,QAlCkB,GAkCP,EAlCO;AAAA,SAmClBC,UAnCkB,GAmCL,EAnCK;AAAA,SAoClBC,SApCkB,GAoCN,EApCM;AAAA,SAqClBC,UArCkB,GAqCL,EArCK;AAAA,SAsClBC,YAtCkB,GAsCH,EAtCG;AAEhB,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKE,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBF,IAAvB,CAA4B,IAA5B,CAAzB;AAEA,SAAKG,KAAL,GAAW;AACPC,MAAAA,MAAM,EAAE,KADD;AAEPC,MAAAA,SAAS,EAAE,EAFJ;AAGPC,MAAAA,aAAa,EAAE,EAHR;AAIPC,MAAAA,WAAW,EAAE,EAJN;AAKPC,MAAAA,cAAc,EAAE,EALT;AAMPnB,MAAAA,WAAW,EAAE,EANN;AAOPC,MAAAA,WAAW,EAAE,EAPN;AAQPmB,MAAAA,YAAY,EAAE,EARP;AASPX,MAAAA,YAAY,EAAE;AATP,KAAX;AAkBD;;AAoBC,QAAMY,QAAN,CAAeL,SAAf,EAAyB;AACrBA,IAAAA,SAAS,CAAC,CAAD,CAAT,CAAaM,GAAb,CAAiB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AAElCC,MAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ,EAA8D,KAAK5B,eAAL,CAAqB,CAArB,CAA9D;AACA2B,MAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ,EAA6D,KAAK3B,iBAAlE;AACC,WAAKA,iBAAL,CAAuB4B,IAAvB,CAA4BJ,QAAQ,CAACK,WAArC;AACA,YAAMC,SAAS,GAAG;AAAC,gBAAQN,QAAQ,CAACO,IAAlB;AAAwB,eAAOP,QAAQ,CAACQ,KAAxC;AAA+C,cAAMR,QAAQ,CAACK,WAA9D;AAA2E,iBAASJ;AAApF,OAAlB;AACA,WAAKxB,WAAL,CAAiB2B,IAAjB,CAAsBE,SAAtB;AACA,WAAKzB,iBAAL,GAAyB,KAAKJ,WAAL,CAAiBgC,MAA1C;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ,EAA6D,KAAK3B,iBAAlE;AACA0B,MAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ,EAAgE,KAAKZ,KAAL,CAAWK,cAA3E;AAIA,aAAO,KAAKnB,WAAZ;AACJ,KAdD,EADqB,CAiBnB;AACL;;AAIF,QAAMa,iBAAN,GAA0B;AAIzB,SAAKN,SAAL,CAAeoB,IAAf,CAAoB,KAAK9B,KAAL,CAAWoC,SAA/B;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8B,KAAKnB,SAAnC;;AACA,QAAI,KAAKP,WAAL,CAAiBgC,MAAjB,GAA0B,CAA9B,EAAgC;AAC5B,WAAKlB,KAAL,CAAWd,WAAX,CAAuB2B,IAAvB,CAA4B,KAAK3B,WAAjC;AACH;;AAED,SAAKO,SAAL,CAAee,GAAf,CAAmB,CAACY,EAAD,EAAKV,KAAL,KAAa;AAEzB;AACRlC,MAAAA,KAAK,CAAC6C,GAAN,CAAU,sDAAqDD,EAA/D,EAAmEE,IAAnE,CAAwEC,GAAG,IAAI;AAC9E;AACAZ,QAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDW,GAAG,CAACC,IAAJ,CAAS,CAAT,CAAtD;AACA,aAAKxC,eAAL,CAAqB6B,IAArB,CAA0BU,GAAG,CAACC,IAAJ,CAAS,CAAT,CAA1B;AACA,cAAMtB,SAAS,GAAG,KAAKlB,eAAvB;AACA2B,QAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ,EAAyDV,SAAS,CAAC,CAAD,CAAlE;AAEA,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAM,KAAKK,QAAL,CAAcL,SAAd,CAAN,CAAP;AAGH,OAVE,CAaH;AAbG;AAoBF,KAvBG;AA0BC;;AAGDJ,EAAAA,iBAAiB,GAAG;AAChB;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAY,yDAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,yDAAZ,EAAuE,KAAK3B,iBAA5E;AACA0B,IAAAA,OAAO,CAACC,GAAR,CAAY,mDAAZ,EAAiE,KAAKzB,WAAtE,EAJgB,CAKhB;;AAEA,UAAMsC,QAAQ,GAAG,KAAKxC,iBAAtB;AACA0B,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDa,QAArD;AAGId,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACApC,IAAAA,KAAK,CAAC6C,GAAN,CAAU,gDAAgDI,QAA1D,EAAoEH,IAApE,CAAyEC,GAAG,IAAG;AAC/EZ,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBW,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAY,CAAZ,CAAnB;AACA,UAAInB,cAAc,GAAGkB,GAAG,CAACC,IAAJ,CAAS,CAAT,EAAY,CAAZ,CAArB;AACA,WAAKE,QAAL,CAAc;AAAErB,QAAAA;AAAF,OAAd;AAEH,KANG,EAZY,CAmBhB;AAIC;;AAGL,QAAMsB,mBAAN,CAA0BC,GAA1B,EAA+BC,KAA/B,EAAsC;AAGlC,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAQ,oBAAC,aAAD;AAER,MAAA,YAAY,EAAED,GAAG,CAACZ,IAFV;AAGR,MAAA,cAAc,EAAEY,GAAG,CAACE,GAHZ;AAIR,MAAA,aAAa,EAAED,KAAK,CAACE,aAJb;AAKR,MAAA,cAAc,EAAEF,KAAK,CAACG,cALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR,MAAR;AAUH;;AAIH,QAAMpC,eAAN,CAAsBV,WAAtB,EAAmCC,WAAnC,EAAgD;AAE9CwB,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+B,KAAKxB,UAApC;AAEAuB,IAAAA,OAAO,CAACC,GAAR,CAAY,oEAAZ,EAAkF,KAAKZ,KAAL,CAAWd,WAA7F;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAY,oEAAZ,EAAkF,KAAKZ,KAAL,CAAWb,WAA7F;AAEAD,IAAAA,WAAW,GAAG,KAAKA,WAAnB;AACAC,IAAAA,WAAW,GAAG,KAAKA,WAAnB;AAEAwB,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0D1B,WAA1D;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAY,4CAAZ,EAA0DzB,WAA1D;AAEA,SAAKa,KAAL,CAAWd,WAAX,CAAuB2B,IAAvB,CAA4B3B,WAA5B;AACA,SAAKc,KAAL,CAAWb,WAAX,CAAuB0B,IAAvB,CAA4B1B,WAA5B;AAEAwB,IAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ,EAAqE,KAAKZ,KAAL,CAAWd,WAAhF;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAY,uDAAZ,EAAqE,KAAKZ,KAAL,CAAWb,WAAhF;AAGA,WAAQD,WAAW,CAACsB,GAAZ,CAAgBoB,GAAG,IACvBzC,WAAW,CAACqB,GAAZ,CAAgBqB,KAAK,IAClBD,GAAG,CAACK,EAAJ,KAAWJ,KAAK,CAACf,WAAjB,GAEH;AAAK,MAAA,GAAG,EAAGc,GAAG,CAACK,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,KAAKN,mBAAL,CAAyBC,GAAzB,EAA8BC,KAA9B,CAFJ,EAGElB,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCgB,GAAtC,CAHF,EAIEjB,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCiB,KAAxC,CAJF,CAFG,GASA,IAVH,CADI,CAAR;AAyBJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GC;;AAEDK,EAAAA,UAAU,GAAG;AACT,SAAKpC,iBAAL;AACH;;AAKDqC,EAAAA,MAAM,GAAG;AAELxB,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgD,KAAKZ,KAAL,CAAWd,WAA3D;AACAyB,IAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgD,KAAKZ,KAAL,CAAWb,WAA3D;AAGF,WACO;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAKL,oBAAC,WAAD;AACA,MAAA,QAAQ,EAAE,GADV;AAEA,MAAA,SAAS,MAFT;AAGA,MAAA,MAAM,EAAE,CAAC;AACPiD,QAAAA,MADO;AAEPC,QAAAA,QAFO;AAGPC,QAAAA,qBAHO;AAIPC,QAAAA;AAJO,OAAD,KAOJ;AAAK,QAAA,SAAS,EAAGH,MAAM,GAAG,eAAH,GAAqB,qBAA5C;AAAmE,QAAA,QAAQ,EAAG,MAAM,KAAKtC,iBAAL,EAApF;AAA+G,QAAA,OAAO,EAAEsC,MAAxH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA;AAAK,QAAA,SAAS,EAAC,aAAf;AAA8B,QAAA,OAAO,EAAE,KAAKT,mBAA5C;AAAiE,QAAA,QAAQ,EAAES,MAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,KAAKrD,KAAL,CAAWyD,YADZ,CAFA,EAME,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAmC,QAAA,GAAG,EAAEF,qBAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIC,KAAKG,qBAJN,EAcF,oBAAC,WAAD;AACA,QAAA,KAAK,EAAC,wJADN;AAEA,QAAA,SAAS,EAAC,QAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdE,CADJ,CANF,CAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALK,CADP;AA4DA;;AA5XwC;;AA8X1C,eAAe7D,WAAf","sourcesContent":["\n\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts'\nimport MarketBlurb from '../MarketBlurb/MarketBlurb'\nimport axios from 'axios';\nimport { objectTypeSpreadProperty, nullLiteral, breakStatement } from '@babel/types';\n\n\nclass LiveMarkets extends React.Component {\n  constructor(props){\n    super(props);\n    this.createContracts = this.createContracts.bind(this);\n    this.getContractPrices = this.getContractPrices.bind(this)\n    this.componentDidMount = this.componentDidMount.bind(this);\n\n    this.state={\n        active: false,\n        contracts: [],\n        contractNames: [],\n        contractIds: [],\n        contractPrices: [],\n        globalNames: [],\n        globalArray: [],\n        globalPrices: [],\n        unique_array: [],\n      \n\n\n    };\n\n    \n\n  \n  }\n  \n\n  globalContracts = [];\n  globalContractIds = [];\n  globalNames = [];\n  globalArray = [];\n  raw_prices = [];\n  bigObj= [];\n  globalNamesLength = \"\" \n  putIndex = [];\n  market_ids = [];\n  marketIds = [];\n  largestObj = [];\n  unique_array = []\n\n\n   \n\n\n    async moveData(contracts){\n        contracts[0].map((contract, index) => {\n        \n            console.log('this.globalContracts[0] BEFORE ADDING TO ARRAY', this.globalContracts[0])\n            console.log('this.globalContractIds BEFORE ADDING TO ARRAY', this.globalContractIds)\n             this.globalContractIds.push(contract.contract_id)\n             const namesUrls = {\"name\": contract.name, \"url\": contract.image, \"id\": contract.contract_id, \"index\": index }\n             this.globalNames.push(namesUrls)\n             this.globalNamesLength = this.globalNames.length\n             console.log('this.globalContractIds AFTER PUSHING TO ARRAY', this.globalContractIds)\n             console.log('this.state.contractPrices AFTER PUSHING TO ARRAY', this.state.contractPrices)\n\n\n    \n             return this.globalNames\n        }\n\n        ) // END OF LOOP\n    }\n\n  \n\n   async componentDidMount() {\n    \n   \n    \n    this.marketIds.push(this.props.mId1Title)\n    console.log('this.marketIds', this.marketIds)\n    if (this.globalNames.length > 0){\n        this.state.globalNames.push(this.globalNames)\n    }\n\n    this.marketIds.map((Id, index)=>{\n\n           //Get contracts\n   axios.get('http://localhost:3002/api/contract/contract_list/'+ Id).then(res => { \n    // this.setState({ contracts: res.data[0] });\n    console.log('res.data[0] NO IDs in Global Contracts', res.data[0])\n    this.globalContracts.push(res.data[0])\n    const contracts = this.globalContracts\n    console.log('contracts[0] how many b4 i run this loop?', contracts[0])\n\n    return <div>{this.moveData(contracts)}</div>\n \n    \n}\n\n\n// something end of call \n\n);\n      \n   \n    \n\n})\n\n\n    }\n\n\n    getContractPrices (){\n        // check contractIds array -- see if they're all there\n        console.log('IF THIS LOG IS FIRED, WE KNOW THE FUNCTION BEING CALLED')\n        console.log('this.globalContractIds -- BEFORE valuesLoop() begins...', this.globalContractIds);\n        console.log('this.globalArray -- BEFORE valuesLoop() begins...', this.globalArray);\n        // checked!\n    \n        const idsArray = this.globalContractIds\n        console.log('idsArray TIP TOP of getContractPrices', idsArray)\n        \n     \n            console.log('ðŸ¥¶')\n            axios.get('http://localhost:3002/api/value/value_list/' + idsArray).then(res =>{\n            console.log('ðŸš¨')\n            console.log('res', res.data[0][0])\n            let contractPrices = res.data[0][0]\n            this.setState({ contractPrices })\n            \n        }) \n        // end of prices call\n    \n      \n       \n        }\n\n\n    async getLiveContractData(row, price) {\n       \n\n        return  <div  > <LiveContracts\n               \n                contractName={row.name}\n                contractAvatar={row.url}\n                contractPrice={price.contractPrice}\n                contractChange={price.contractChange}\n\n        /> </div>\n       \n\n    }\n\n\n\n  async createContracts(globalNames, globalArray) {\n\n    console.log('this.raw_prices', this.raw_prices)\n\n    console.log('FIRSTTTTTTTT this.state.globalNames INSIDE CREATE CONTRACTS METHOD', this.state.globalNames)\n    console.log('FIRSTTTTTTTT this.state.globalArray INSIDE CREATE CONTRACTS METHOD', this.state.globalArray)\n\n    globalNames = this.globalNames\n    globalArray = this.globalArray\n\n    console.log('globalNames INSIDE CREATE CONTRACTS METHOD', globalNames)\n    console.log('globalArray INSIDE CREATE CONTRACTS METHOD', globalArray)\n    \n    this.state.globalNames.push(globalNames)\n    this.state.globalArray.push(globalArray)\n\n    console.log('this.state.globalNames INSIDE CREATE CONTRACTS METHOD', this.state.globalNames)\n    console.log('this.state.globalArray INSIDE CREATE CONTRACTS METHOD', this.state.globalArray)\n\n \n    return (globalNames.map(row => (\n        globalArray.map(price => (\n           row.id === price.contract_id ?\n           \n        <div key={ row.id }>\n          \n          { this.getLiveContractData(row, price) }\n         {console.log('in createContracts row', row)}\n         {console.log('in createContracts price', price)}\n         \n        </div>\n        : (null) \n      ))\n      \n    )))\n\n           \n           \n\n\n\n\n\n\n\n/*\n\n\n\nfunction removeDuplicates(bigObj){\n    let unique_array = []\n    for(let i = 0;i < bigObj.length; i++){\n        if(unique_array.indexOf(bigObj[i].id && bigObj[i].name) === -1){\n            //unique_array.push(\"id\" + arr[i].id)\n            //unique_array.push(\"name\" + arr[i].name)\n            //unique_array.push(\"contractPrice\" + arr[i].contractPrice)\n            //unique_array.push(\"contractChange\" + arr[i].contractChange)\n\n            unique_array.push([bigObj[i].name]);\n            unique_array.push({\n                \"id\": bigObj[i].id,\n                \"contract_id\": bigObj[i].contract_id,\n                \"name\": bigObj[i].name,\n                \"url\": bigObj[i].url,\n                \"contractPrice\": bigObj[i].contractPrice,\n                \"contractChange\": bigObj[i].contractChange\n            });\n            \n\n           \n        }\n\n    }\n    return unique_array\n}\n\n\nconsole.log('removeDuplicates(this.bigObj)', removeDuplicates(this.bigObj));\nconsole.log('this.unique_array', this.unique_array);\nthis.unique_array.push(removeDuplicates(this.bigObj))\nconsole.log('removeDuplicates(this.bigObj)', removeDuplicates(this.bigObj));\nconsole.log('this.unique_array HERE???????', this.unique_array);\n\n\n\n\n\n\n\n\n\n\n\nfunction removeDuplicates(arr){\n    let unique_array = []\n    for(let i = 0;i < arr.length; i++){\n        if(unique_array.indexOf(arr[i].id) === -1 && unique_array.indexOf(arr[i].contract_id) === -1 && unique_array.indexOf(arr[i].name) === -1 && unique_array.indexOf(arr[i].contractPrice) === -1 && unique_array.indexOf(arr[i].contractChange) === -1 && unique_array.indexOf(arr[i].url) === -1){\n            console.log('arr[i].name', arr[i].name )\n            console.log('arr[i].url', arr[i].url )\n            console.log('arr[i].contractPrices', arr[i].contractPrice )\n            console.log('arr[i].contractChange', arr[i].contractChange )\n            console.log('arr[i].contract_id', arr[i].contract_id )\n            console.log('arr[i].id', arr[i].id )\n            //this.bigObj = [];\n            const scrubbedData = {\"name\" : arr[i].name , \"url\" : arr[i].url ,  \"contractPrices\" : arr[i].contractPrice , \"contractChange\" : arr[i].contractChange, \"contract_id\" : arr[i].contract_id , \"id\" : arr[i].id}\n            const scrubby = [arr[i].name && arr[i].name];\n            console.log('scrubbedData', scrubbedData)\n            //this.bigObj.push(scrubbedData)\n            unique_array.push(scrubbedData)\n            \n            console.log('unique_array', unique_array)\n           \n        }\n    }\n    return unique_array\n}\n\nconsole.log('removeDuplicates(this.bigObj)', removeDuplicates(this.bigObj)); \n\n\n\n\n\nthis.globalArray.map((line, k) => {\n                if ( index === k) {\n            console.log('row.id INSIDE', row.contract_id)      \n            console.log('line.id INSIDE', line.id)\n            console.log('k', k)\n            console.log('index', index)\n           \n           \n          \n            \n\n            const jointObj = {\"name\": row.name, \"url\": row.url, \"contractPrice\": line.contractPrice, \"contractChange\": line.contractChange, \"contract_id\": line.contract_id, \"id\": row.id, \"repeat\": 0}\n            console.log('this.jointObj', jointObj)\n            this.bigObj.push(jointObj);\n            \n            console.log('this.bogObj', this.bigObj);\n           \n        } else {\n            breakStatement();\n        }\n         \n    })\n\n\n\n*/\n\n\n    \n\n    \n \n\n}\n\npricesFire() {\n    this.getContractPrices()\n}\n\n\n\n\nrender() {\n\n    console.log('this.state.globalNames IN RENDER', this.state.globalNames)\n    console.log('this.state.globalArray IN RENDER', this.state.globalArray)\n\n \n  return (\n         <div className=\"parent\">\n             <div className=\"one\">\n                 \n             </div>\n\n    <SlideToggle\n    duration={300}\n    collapsed\n    render={({\n      toggle,\n      progress,\n      setCollapsibleElement,\n      range,\n    }) => (\n\n        <div className={ toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive'} onChange={ () => this.getContractPrices() } onClick={toggle} > \n       \n        <div className=\"LiveMarkets\"  onClick={this.getLiveContractData} onChange={toggle} >\n        {this.props.contractName}\n    \n          </div>\n          <SlideToggle >\n              <div className=\"slide-toggle__box\" ref={setCollapsibleElement}>\n\n             \n          \n              {this.thisgetcontractPrices}\n            \n              \n              \n           \n               \n               \n            \n              \n\n            <MarketBlurb \n            blurb=\"PredictItâ€™s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\"\n            blurbLink=\" here.\"\n            \n            />\n        \n        </div>\n       \n        </SlideToggle>\n\n       \n        \n\n   \n\n\n      \n      </div>\n      )}\n    \n      />\n      </div>\n  );\n }\n}\nexport default LiveMarkets;"]},"metadata":{},"sourceType":"module"}