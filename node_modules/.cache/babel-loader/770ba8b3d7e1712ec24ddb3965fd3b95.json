{"ast":null,"code":"var _jsxFileName = \"/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js\";\n\n/* \n\n <LiveContracts \n        avatar={require('../../images/BidenAvatar.png')}\n        contractName=\"Joe Biden\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.14\"\n        priceChange=\"0.2\" \n        />\n         <LiveContracts \n        avatar={require('../../images/BernieAvatar.png')}\n        contractName=\"Bernie Sanders\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.06\"\n        priceChange=\"0.3\" \n        />\n         <LiveContracts \n        avatar={require('../../images/ButtigeigAvatar.png')}\n        contractName=\"Pete Buttigeig\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.05\"\n        priceChange=\"0.1\" \n        />\n         <LiveContracts \n        avatar={require('../../images/WarrenAvatar.png')}\n        contractName=\"Elizabeth Warren\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.03\"\n        priceChange=\"0.1\" \n        />\n\n\n\n\n*/\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts';\nimport MarketBlurb from '../MarketBlurb/MarketBlurb';\nimport axios from 'axios';\n\nclass LiveMarkets extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggleActive = () => {\n      this.setState({\n        active: !this.state.active\n      });\n    };\n\n    this.state = {\n      active: false,\n      contracts: [],\n      mId1: '2721',\n      contractIds: [],\n      contractPrices: [],\n      activeArray: [],\n      cPrice: \"\",\n      pChange: \"\",\n      cName: \"\",\n      cAvatar: \"\",\n      cData: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:3002/api/contract/contract_list/' + this.props.mId1Title).then(res => {\n      this.setState({\n        contracts: res.data[0]\n      }); // Loop thru all the contracts\n\n      const contracts = this.state.contracts;\n      contracts.map((contract, index) => {\n        this.state.contractIds.push(contract.contract_id); // put name and avatar in state \n\n        this.setState({\n          cName: contract.name\n        });\n        this.setState({\n          cAvatar: contract.image\n        });\n        const contractIds = this.state.contractIds; // Need Contract Ids\n        // For each contract (data), Push the contract_id into contractIds array\n\n        axios.get('http://localhost:3002/api/value/value_list/' + contractIds[index]).then(res => {\n          // Put contract values into array in state\n          this.setState({\n            contractPrices: res.data[0]\n          }); // make some variables to easily move data around\n\n          const values = this.state.contractPrices;\n          const lastTrade = values.last_trade_price;\n          const lastClose = values.last_close_price;\n          const priceDiff = (lastClose - lastTrade).toFixed(2);\n          const priceSwap = (lastClose - lastTrade).toFixed(2); // save prices in state\n\n          const cPrice = lastTrade;\n          this.setState({\n            cPrice: cPrice\n          });\n          const pChange = priceDiff;\n          this.setState({\n            pChange: pChange\n          });\n        }); // end of prices call\n        // Push both the current contract's name, avatar, into an array with the two values assoc w/ contract_id\n\n        const dataObj = {\n          'avatar': this.state.cAvatar,\n          'name': this.state.cName,\n          'price': this.state.cPrice,\n          'change': this.state.pChange\n        };\n        this.state.cData.push(dataObj);\n        console.log('this.state.cData', this.state.cData);\n        this.setState({\n          cPrice: \"\"\n        });\n        this.setState({\n          pChange: \"\"\n        });\n        this.setState({\n          cName: \"\"\n        });\n        this.setState({\n          cAvatar: \"\"\n        });\n        console.log('this.state.cPrice', this.state.cPrice);\n        console.log('this.state.pChange', this.state.pChange);\n        console.log('this.state.cName', this.state.cName);\n        console.log('this.state.cAvatar', this.state.cAvatar);\n      });\n    });\n  }\n  /* \n  \n  \n  \n  \n          console.log('response', res.data);\n          this.setState({ data: res.data[0] });\n          \n          // Loop thru all the contracts\n          const datas = this.state.data\n          datas.map((data, index) => {\n          \n  \n          //Get the values\n          const theValues = \n          // Get the Ids\n          // For each contract (data), Push the contract_id into contractIds array\n          this.state.contractIds.push(data.contract_id)\n  \n          console.log('contractIds', this.state.contractIds)\n          console.log('this.state.data', this.state.data);\n          \n          // Get the contract name and image\n          const cName = data.name;\n          const cAvatar = data.image;\n  \n          this.state.nameD.push(cName)\n          this.state.avatarD.push(cAvatar)\n  \n      \n        \n          console.log('cData Array', this.state.cData)\n         \n         \n          \n          \n          \n          const ids = this.state.contractIds\n          axios.get('http://localhost:3002/api/value/value_list/' + ids[index])\n          .then(res => {\n              this.setState({ contractPrices: res.data[0]})\n              \n              this.afunction()\n              console.log('this.state.activeArray', this.state.activeArray);\n              return console.log('contract prices', this.state.contractPrices) \n          });\n  \n          // end of Contracts Loop\n          })\n          //console.log('this.state.data', this.state.data)\n  \n  \n  */\n\n\n  render() {\n    const activeContracts = [{\n      avatar: require(\"../../images/KamalaAvatar.png\"),\n      contractName: \"Kamala Harris\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.84\",\n      priceChange: \"0.02\"\n    }, {\n      avatar: require(\"../../images/BidenAvatar.png\"),\n      contractName: \"Joe Biden\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.01\",\n      priceChange: \"0.02\"\n    }, {\n      avatar: require(\"../../images/BernieAvatar.png\"),\n      contractName: \"Bernie Sanders\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.01\",\n      priceChange: \"0.02\"\n    }, {\n      avatar: require(\"../../images/ButtigeigAvatar.png\"),\n      contractName: \"Pete Buttigeig\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.01\",\n      priceChange: \"0.00\"\n    }, {\n      avatar: require(\"../../images/WarrenAvatar.png\"),\n      contractName: \"Elizabeth Warren\",\n      contractLabel: \"Latest Price\",\n      contractPrice: \"0.01\",\n      priceChange: \"0.02\"\n    }];\n    return React.createElement(\"div\", {\n      className: \"parent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"one\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(SlideToggle, {\n      duration: 300,\n      collapsed: true,\n      render: ({\n        toggle,\n        progress,\n        setCollapsibleElement,\n        range\n      }) => React.createElement(\"div\", {\n        className: toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive',\n        onClick: toggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"LiveMarkets\",\n        onClick: this.props.theToggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, this.props.relevantMarkets.contractName), React.createElement(SlideToggle, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"slide-toggle__box\",\n        ref: setCollapsibleElement,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, activeContracts.map((activeContract, index) => {\n        //console.log('this the index', index)\n        return React.createElement(LiveContracts, {\n          key: index,\n          activeContracts: activeContract,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        });\n      }), React.createElement(MarketBlurb, {\n        blurb: \"PredictIt\\u2019s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\",\n        blurbLink: \" here.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      })))),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LiveMarkets;","map":{"version":3,"sources":["/Users/cam/real_money_polls/src/components/LiveMarkets/LiveMarkets.js"],"names":["React","SlideToggle","LiveContracts","MarketBlurb","axios","LiveMarkets","Component","constructor","props","toggleActive","setState","active","state","contracts","mId1","contractIds","contractPrices","activeArray","cPrice","pChange","cName","cAvatar","cData","componentDidMount","get","mId1Title","then","res","data","map","contract","index","push","contract_id","name","image","values","lastTrade","last_trade_price","lastClose","last_close_price","priceDiff","toFixed","priceSwap","dataObj","console","log","render","activeContracts","avatar","require","contractName","contractLabel","contractPrice","priceChange","toggle","progress","setCollapsibleElement","range","theToggle","relevantMarkets","activeContract"],"mappings":"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","sourcesContent":["/* \n\n <LiveContracts \n        avatar={require('../../images/BidenAvatar.png')}\n        contractName=\"Joe Biden\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.14\"\n        priceChange=\"0.2\" \n        />\n         <LiveContracts \n        avatar={require('../../images/BernieAvatar.png')}\n        contractName=\"Bernie Sanders\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.06\"\n        priceChange=\"0.3\" \n        />\n         <LiveContracts \n        avatar={require('../../images/ButtigeigAvatar.png')}\n        contractName=\"Pete Buttigeig\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.05\"\n        priceChange=\"0.1\" \n        />\n         <LiveContracts \n        avatar={require('../../images/WarrenAvatar.png')}\n        contractName=\"Elizabeth Warren\"\n        contractLabel=\"Latest Price\"\n        contractPrice=\"0.03\"\n        priceChange=\"0.1\" \n        />\n\n\n\n\n*/\n\nimport React from 'react';\nimport './LiveMarkets.scss';\nimport SlideToggle from 'react-slide-toggle';\nimport LiveContracts from '../LiveContracts/LiveContracts'\nimport MarketBlurb from '../MarketBlurb/MarketBlurb'\nimport axios from 'axios';\n\n\nclass LiveMarkets extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state={\n        active: false,\n        contracts: [],\n        mId1: '2721',\n        contractIds: [],\n        contractPrices: [],\n        activeArray: [],\n        cPrice: \"\",\n        pChange: \"\",\n        cName: \"\", \n        cAvatar: \"\", \n        cData: [],\n       \n\n        \n\n\n    }\n\n \n\n    \n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:3002/api/contract/contract_list/'+ this.props.mId1Title)\n    .then(res => {\n        this.setState({ contracts: res.data[0] });\n        // Loop thru all the contracts\n        const contracts = this.state.contracts\n        contracts.map((contract, index) => {\n            this.state.contractIds.push(contract.contract_id)\n            // put name and avatar in state \n            this.setState({ cName: contract.name})\n            this.setState({ cAvatar: contract.image})\n            const contractIds = this.state.contractIds \n            // Need Contract Ids\n            // For each contract (data), Push the contract_id into contractIds array\n            axios.get('http://localhost:3002/api/value/value_list/' + contractIds[index]).then(res =>{\n              \n                // Put contract values into array in state\n                this.setState({ contractPrices: res.data[0]})\n                // make some variables to easily move data around\n                const values = this.state.contractPrices\n                const lastTrade = values.last_trade_price\n                const lastClose = values.last_close_price\n                const priceDiff = (lastClose - lastTrade).toFixed(2)\n                const priceSwap = (lastClose - lastTrade).toFixed(2)\n                // save prices in state\n                const cPrice = lastTrade;\n                this.setState({ cPrice: cPrice})\n                const pChange = priceDiff;\n                this.setState({ pChange: pChange})\n                \n            })\n            // end of prices call\n\n            // Push both the current contract's name, avatar, into an array with the two values assoc w/ contract_id\n               const dataObj = {'avatar': this.state.cAvatar, 'name': this.state.cName, 'price': this.state.cPrice, 'change': this.state.pChange}\n               this.state.cData.push(dataObj)\n               console.log('this.state.cData', this.state.cData);\n\n               this.setState({ cPrice: \"\"})\n               this.setState({ pChange: \"\"})\n               this.setState({ cName: \"\"})\n               this.setState({ cAvatar: \"\"})\n\n               console.log('this.state.cPrice', this.state.cPrice)\n               console.log('this.state.pChange', this.state.pChange)\n\n               console.log('this.state.cName', this.state.cName)\n               console.log('this.state.cAvatar', this.state.cAvatar)\n\n            })\n\n\n        \n    }); \n}\n\n\n\n/* \n\n\n\n\n        console.log('response', res.data);\n        this.setState({ data: res.data[0] });\n        \n        // Loop thru all the contracts\n        const datas = this.state.data\n        datas.map((data, index) => {\n        \n\n        //Get the values\n        const theValues = \n        // Get the Ids\n        // For each contract (data), Push the contract_id into contractIds array\n        this.state.contractIds.push(data.contract_id)\n\n        console.log('contractIds', this.state.contractIds)\n        console.log('this.state.data', this.state.data);\n        \n        // Get the contract name and image\n        const cName = data.name;\n        const cAvatar = data.image;\n\n        this.state.nameD.push(cName)\n        this.state.avatarD.push(cAvatar)\n\n    \n      \n        console.log('cData Array', this.state.cData)\n       \n       \n        \n        \n        \n        const ids = this.state.contractIds\n        axios.get('http://localhost:3002/api/value/value_list/' + ids[index])\n        .then(res => {\n            this.setState({ contractPrices: res.data[0]})\n            \n            this.afunction()\n            console.log('this.state.activeArray', this.state.activeArray);\n            return console.log('contract prices', this.state.contractPrices) \n        });\n\n        // end of Contracts Loop\n        })\n        //console.log('this.state.data', this.state.data)\n\n\n*/\n\n    \n  \n\n  toggleActive = () => {\n\n      this.setState({ active: !this.state.active })\n  }\n\n \n\n\nrender() {\n\n    const activeContracts = [\n        {\n            avatar: require(\"../../images/KamalaAvatar.png\"),\n            contractName: \"Kamala Harris\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.84\",\n            priceChange: \"0.02\"\n        },\n        {\n            avatar: require(\"../../images/BidenAvatar.png\"),\n            contractName: \"Joe Biden\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.01\",\n            priceChange: \"0.02\"\n        },\n        {\n            avatar: require(\"../../images/BernieAvatar.png\"),\n            contractName: \"Bernie Sanders\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.01\",\n            priceChange: \"0.02\"\n        },\n        {\n            avatar: require(\"../../images/ButtigeigAvatar.png\"),\n            contractName: \"Pete Buttigeig\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.01\",\n            priceChange: \"0.00\"\n        },\n        {\n            avatar: require(\"../../images/WarrenAvatar.png\"),\n            contractName: \"Elizabeth Warren\",\n            contractLabel: \"Latest Price\",\n            contractPrice: \"0.01\",\n            priceChange: \"0.02\"\n        },\n\n    ]\n\n\n\n  return (\n         <div className=\"parent\">\n             <div className=\"one\">\n                 \n             </div>\n\n    <SlideToggle\n    duration={300}\n    collapsed\n    render={({\n      toggle,\n      progress,\n      setCollapsibleElement,\n      range,\n    }) => (\n\n        <div className={ toggle ? 'LiveMarketBox' : 'LiveMarketBoxActive'} onClick={toggle }>\n        \n        <div className=\"LiveMarkets\"  onClick={this.props.theToggle}>\n        {this.props.relevantMarkets.contractName}\n    \n          </div>\n          <SlideToggle>\n              <div className=\"slide-toggle__box\" ref={setCollapsibleElement}>\n              { \n      \n      activeContracts.map((activeContract, index) => {\n          //console.log('this the index', index)\n          return <LiveContracts\n          key={index} \n          activeContracts={activeContract}\n         \n          />\n          \n          })           \n    } \n\n            <MarketBlurb \n            blurb=\"PredictIt’s Live Market Data based on upcoming future events. These are the markets most closely associated with key events. Find market details,\"\n            blurbLink=\" here.\"\n            \n            />\n        \n        </div>\n       \n        </SlideToggle>\n\n       \n        \n\n   \n\n\n      \n      </div>\n      )}\n    \n      />\n      </div>\n  );\n }\n}\nexport default LiveMarkets;"]},"metadata":{},"sourceType":"module"}